<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Illuminate\Queue; use Illuminate\Support\Arr; use Illuminate\Support\Str; use Illuminate\Redis\Database; use Illuminate\Queue\Jobs\RedisJob; use Illuminate\Contracts\Queue\Queue as QueueContract; class RedisQueue extends Queue implements QueueContract { protected $redis; protected $connection; protected $default; protected $expire = 60; public function __construct(Database $YURb8, $RsCDD = 'default', $baCt2 = null) { goto RgnJB; yNx5Y: $this->default = $RsCDD; goto MAzyr; RgnJB: $this->redis = $YURb8; goto yNx5Y; MAzyr: $this->connection = $baCt2; goto WDNNt; WDNNt: } public function push($mYDq6, $nx179 = '', $QgVE4 = null) { return $this->pushRaw($this->createPayload($mYDq6, $nx179), $QgVE4); } public function pushRaw($UHUzq, $QgVE4 = null, array $iVFbz = array()) { $this->getConnection()->rpush($this->getQueue($QgVE4), $UHUzq); return Arr::get(json_decode($UHUzq, true), 'id'); } public function later($Qs4Xh, $mYDq6, $nx179 = '', $QgVE4 = null) { goto S6Kzm; jMD7l: $Qs4Xh = $this->getSeconds($Qs4Xh); goto jfJ4v; Lr2Fj: return Arr::get(json_decode($UHUzq, true), 'id'); goto PmKY1; jfJ4v: $this->getConnection()->zadd($this->getQueue($QgVE4) . ':delayed', $this->getTime() + $Qs4Xh, $UHUzq); goto Lr2Fj; S6Kzm: $UHUzq = $this->createPayload($mYDq6, $nx179); goto jMD7l; PmKY1: } public function release($QgVE4, $UHUzq, $Qs4Xh, $hLWyt) { $UHUzq = $this->setMeta($UHUzq, 'attempts', $hLWyt); $this->getConnection()->zadd($this->getQueue($QgVE4) . ':delayed', $this->getTime() + $Qs4Xh, $UHUzq); } public function pop($QgVE4 = null) { goto L79wd; YHeC6: $QgVE4 = $this->getQueue($QgVE4); goto eJZSY; eJZSY: if (!is_null($this->expire)) { $this->migrateAllExpiredJobs($QgVE4); } goto F1RwD; F1RwD: $mYDq6 = $this->getConnection()->lpop($QgVE4); goto X59vS; L79wd: $qSgMY = $QgVE4 ?: $this->default; goto YHeC6; X59vS: if (!is_null($mYDq6)) { $this->getConnection()->zadd($QgVE4 . ':reserved', $this->getTime() + $this->expire, $mYDq6); return new RedisJob($this->container, $this, $mYDq6, $qSgMY); } goto yR6m8; yR6m8: } public function deleteReserved($QgVE4, $mYDq6) { $this->getConnection()->zrem($this->getQueue($QgVE4) . ':reserved', $mYDq6); } protected function migrateAllExpiredJobs($QgVE4) { $this->migrateExpiredJobs($QgVE4 . ':delayed', $QgVE4); $this->migrateExpiredJobs($QgVE4 . ':reserved', $QgVE4); } public function migrateExpiredJobs($XfNw_, $oTyWU) { $oKMGD = '
local val = redis.call(\'zrangebyscore\', KEYS[1], \'-inf\', ARGV[1], \'limit\', 0, ARGV[2])
if(next(val) ~= nil) then
    redis.call(\'zremrangebyrank\', KEYS[1], 0, #val - 1)
    for i = 1, #val, 100 do
        redis.call(\'rpush\', KEYS[2], unpack(val, i, math.min(i+99, #val)))
    end
end
return val
'; $this->getConnection()->eval($oKMGD, 2, $XfNw_, $oTyWU, time(), 100); } protected function getExpiredJobs($mGztP, $XfNw_, $FU6n6) { return $mGztP->zrangebyscore($XfNw_, '-inf', $FU6n6); } protected function removeExpiredJobs($mGztP, $XfNw_, $FU6n6) { $mGztP->multi(); $mGztP->zremrangebyscore($XfNw_, '-inf', $FU6n6); } protected function pushExpiredJobsOntoNewQueue($mGztP, $oTyWU, $LnJik) { call_user_func_array(array($mGztP, 'rpush'), array_merge(array($oTyWU), $LnJik)); } protected function createPayload($mYDq6, $nx179 = '', $QgVE4 = null) { goto flq4B; flq4B: $UHUzq = parent::createPayload($mYDq6, $nx179); goto v6khp; v6khp: $UHUzq = $this->setMeta($UHUzq, 'id', $this->getRandomId()); goto YLNNt; YLNNt: return $this->setMeta($UHUzq, 'attempts', 1); goto BCxEv; BCxEv: } protected function getRandomId() { return Str::random(32); } protected function getQueue($QgVE4) { return 'queues:' . ($QgVE4 ?: $this->default); } protected function getConnection() { return $this->redis->connection($this->connection); } public function getRedis() { return $this->redis; } public function getExpire() { return $this->expire; } public function setExpire($DHk5j) { $this->expire = $DHk5j; } }