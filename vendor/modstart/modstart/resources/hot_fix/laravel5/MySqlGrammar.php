<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Illuminate\Database\Schema\Grammars; use Illuminate\Support\Fluent; use Illuminate\Database\Connection; use Illuminate\Database\Schema\Blueprint; class MySqlGrammar extends Grammar { protected $modifiers = array('Unsigned', 'Charset', 'Collate', 'Nullable', 'Default', 'Increment', 'Comment', 'After', 'First'); protected $serials = array('bigInteger', 'integer', 'mediumInteger', 'smallInteger', 'tinyInteger'); public function compileTableExists() { return 'select * from information_schema.tables where table_schema = ? and table_name = ?'; } public function compileColumnExists() { return 'select column_name as `column_name` from information_schema.columns where table_schema = ? and table_name = ?'; } public function compileCreate(Blueprint $yDBlK, Fluent $kzmw4, Connection $baCt2) { goto vWlw9; sSw2G: return $N4nxN; goto MIDiY; g2mLO: if (isset($yDBlK->engine)) { $N4nxN .= ' engine = ' . $yDBlK->engine; } goto sSw2G; mz_EZ: $N4nxN = $yDBlK->temporary ? 'create temporary' : 'create'; goto F9LLQ; zZ9as: $N4nxN = $this->compileCreateEncoding($N4nxN, $baCt2, $yDBlK); goto g2mLO; F9LLQ: $N4nxN .= ' table ' . $this->wrapTable($yDBlK) . " ({$zlw0F})"; goto zZ9as; vWlw9: $zlw0F = implode(', ', $this->getColumns($yDBlK)); goto mz_EZ; MIDiY: } protected function compileCreateEncoding($N4nxN, Connection $baCt2, Blueprint $yDBlK) { goto YLo7r; M4ZUm: return $N4nxN; goto nl6CJ; lKXwf: if (isset($yDBlK->collation)) { $N4nxN .= ' collate ' . $yDBlK->collation; } elseif (!is_null($kM0VP = $baCt2->getConfig('collation'))) { $N4nxN .= ' collate ' . $kM0VP; } goto M4ZUm; YLo7r: if (isset($yDBlK->charset)) { $N4nxN .= ' default character set ' . $yDBlK->charset; } elseif (!is_null($kD4xd = $baCt2->getConfig('charset'))) { $N4nxN .= ' default character set ' . $kD4xd; } goto lKXwf; nl6CJ: } public function compileAdd(Blueprint $yDBlK, Fluent $kzmw4) { goto oeb_o; n5nkG: return 'alter table ' . $R3agm . ' ' . implode(', ', $zlw0F); goto bRrMq; mfWZ6: $zlw0F = $this->prefixArray('add', $this->getColumns($yDBlK)); goto n5nkG; oeb_o: $R3agm = $this->wrapTable($yDBlK); goto mfWZ6; bRrMq: } public function compilePrimary(Blueprint $yDBlK, Fluent $kzmw4) { $kzmw4->name(null); return $this->compileKey($yDBlK, $kzmw4, 'primary key'); } public function compileUnique(Blueprint $yDBlK, Fluent $kzmw4) { return $this->compileKey($yDBlK, $kzmw4, 'unique'); } public function compileIndex(Blueprint $yDBlK, Fluent $kzmw4) { return $this->compileKey($yDBlK, $kzmw4, 'index'); } protected function compileKey(Blueprint $yDBlK, Fluent $kzmw4, $EY7Cx) { goto xi7Y5; tC78H: return "alter table {$R3agm} add {$EY7Cx} `{$kzmw4->index}`({$zlw0F})"; goto h8h0c; UiVj1: $R3agm = $this->wrapTable($yDBlK); goto tC78H; xi7Y5: $zlw0F = $this->columnize($kzmw4->columns); goto UiVj1; h8h0c: } public function compileDrop(Blueprint $yDBlK, Fluent $kzmw4) { return 'drop table ' . $this->wrapTable($yDBlK); } public function compileDropIfExists(Blueprint $yDBlK, Fluent $kzmw4) { return 'drop table if exists ' . $this->wrapTable($yDBlK); } public function compileDropColumn(Blueprint $yDBlK, Fluent $kzmw4) { goto byq1s; byq1s: $zlw0F = $this->prefixArray('drop', $this->wrapArray($kzmw4->columns)); goto suaAe; aYu1l: return 'alter table ' . $R3agm . ' ' . implode(', ', $zlw0F); goto XmJp7; suaAe: $R3agm = $this->wrapTable($yDBlK); goto aYu1l; XmJp7: } public function compileDropPrimary(Blueprint $yDBlK, Fluent $kzmw4) { return 'alter table ' . $this->wrapTable($yDBlK) . ' drop primary key'; } public function compileDropUnique(Blueprint $yDBlK, Fluent $kzmw4) { $R3agm = $this->wrapTable($yDBlK); return "alter table {$R3agm} drop index `{$kzmw4->index}`"; } public function compileDropIndex(Blueprint $yDBlK, Fluent $kzmw4) { $R3agm = $this->wrapTable($yDBlK); return "alter table {$R3agm} drop index `{$kzmw4->index}`"; } public function compileDropForeign(Blueprint $yDBlK, Fluent $kzmw4) { $R3agm = $this->wrapTable($yDBlK); return "alter table {$R3agm} drop foreign key `{$kzmw4->index}`"; } public function compileRename(Blueprint $yDBlK, Fluent $kzmw4) { $XfNw_ = $this->wrapTable($yDBlK); return "rename table {$XfNw_} to " . $this->wrapTable($kzmw4->to); } protected function typeChar(Fluent $NS5_3) { return "char({$NS5_3->length})"; } protected function typeString(Fluent $NS5_3) { return "varchar({$NS5_3->length})"; } protected function typeText(Fluent $NS5_3) { return 'text'; } protected function typeMediumText(Fluent $NS5_3) { return 'mediumtext'; } protected function typeLongText(Fluent $NS5_3) { return 'longtext'; } protected function typeBigInteger(Fluent $NS5_3) { return 'bigint'; } protected function typeInteger(Fluent $NS5_3) { return 'int'; } protected function typeMediumInteger(Fluent $NS5_3) { return 'mediumint'; } protected function typeTinyInteger(Fluent $NS5_3) { return 'tinyint'; } protected function typeSmallInteger(Fluent $NS5_3) { return 'smallint'; } protected function typeFloat(Fluent $NS5_3) { return $this->typeDouble($NS5_3); } protected function typeDouble(Fluent $NS5_3) { if ($NS5_3->total && $NS5_3->places) { return "double({$NS5_3->total}, {$NS5_3->places})"; } return 'double'; } protected function typeDecimal(Fluent $NS5_3) { return "decimal({$NS5_3->total}, {$NS5_3->places})"; } protected function typeBoolean(Fluent $NS5_3) { return 'tinyint(1)'; } protected function typeEnum(Fluent $NS5_3) { return 'enum(\'' . implode('\', \'', $NS5_3->allowed) . '\')'; } protected function typeJson(Fluent $NS5_3) { return 'text'; } protected function typeJsonb(Fluent $NS5_3) { return 'text'; } protected function typeDate(Fluent $NS5_3) { return 'date'; } protected function typeDateTime(Fluent $NS5_3) { return 'datetime'; } protected function typeDateTimeTz(Fluent $NS5_3) { return 'datetime'; } protected function typeTime(Fluent $NS5_3) { return 'time'; } protected function typeTimeTz(Fluent $NS5_3) { return 'time'; } protected function typeTimestamp(Fluent $NS5_3) { goto DpsQU; DpsQU: if ($NS5_3->useCurrent) { return 'timestamp default CURRENT_TIMESTAMP'; } goto UYweV; kKDab: return 'timestamp'; goto TnZqe; UYweV: if (!$NS5_3->nullable && $NS5_3->default === null) { return 'timestamp default 0'; } goto kKDab; TnZqe: } protected function typeTimestampTz(Fluent $NS5_3) { goto NmDWI; kuK30: if (!$NS5_3->nullable && $NS5_3->default === null) { return 'timestamp default 0'; } goto VBLSn; VBLSn: return 'timestamp'; goto mEygO; NmDWI: if ($NS5_3->useCurrent) { return 'timestamp default CURRENT_TIMESTAMP'; } goto kuK30; mEygO: } protected function typeBinary(Fluent $NS5_3) { return 'blob'; } protected function typeUuid(Fluent $NS5_3) { return 'char(36)'; } protected function modifyUnsigned(Blueprint $yDBlK, Fluent $NS5_3) { if ($NS5_3->unsigned) { return ' unsigned'; } } protected function modifyCharset(Blueprint $yDBlK, Fluent $NS5_3) { if (!is_null($NS5_3->charset)) { return ' character set ' . $NS5_3->charset; } } protected function modifyCollate(Blueprint $yDBlK, Fluent $NS5_3) { if (!is_null($NS5_3->collation)) { return ' collate ' . $NS5_3->collation; } } protected function modifyNullable(Blueprint $yDBlK, Fluent $NS5_3) { return $NS5_3->nullable ? ' null' : ' not null'; } protected function modifyDefault(Blueprint $yDBlK, Fluent $NS5_3) { if (!is_null($NS5_3->default)) { return ' default ' . $this->getDefaultValue($NS5_3->default); } } protected function modifyIncrement(Blueprint $yDBlK, Fluent $NS5_3) { if (in_array($NS5_3->type, $this->serials) && $NS5_3->autoIncrement) { return ' auto_increment primary key'; } } protected function modifyFirst(Blueprint $yDBlK, Fluent $NS5_3) { if (!is_null($NS5_3->first)) { return ' first'; } } protected function modifyAfter(Blueprint $yDBlK, Fluent $NS5_3) { if (!is_null($NS5_3->after)) { return ' after ' . $this->wrap($NS5_3->after); } } protected function modifyComment(Blueprint $yDBlK, Fluent $NS5_3) { if (!is_null($NS5_3->comment)) { return ' comment "' . $NS5_3->comment . '"'; } } protected function wrapValue($VuXfH) { if ($VuXfH === '*') { return $VuXfH; } return '`' . str_replace('`', '``', $VuXfH) . '`'; } }