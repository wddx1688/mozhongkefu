<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace ModStart\Field; use ModStart\Core\Dao\ModelUtil; use ModStart\Core\Util\ConvertUtil; use ModStart\Core\Util\SerializeUtil; use ModStart\Core\Util\TagUtil; class Tags extends AbstractField { const SERIALIZE_TYPE_DEFAULT = null; const SERIALIZE_TYPE_COLON_SEPARATED = 1; protected function setup() { $this->addVariables(array('tags' => array(), 'serializeType' => null)); } public function tags($VuXfH) { $this->addVariables(array('tags' => $VuXfH)); return $this; } public function serializeType($VuXfH) { $this->addVariables(array('serializeType' => $VuXfH)); return $this; } public function serializeAsColonSeparated() { $this->serializeType(self::SERIALIZE_TYPE_COLON_SEPARATED); return $this; } public function tagType($EY7Cx) { return self::tags($EY7Cx::getList()); } public function tagModel($R3agm, $PkGEp = 'id', $HamKI = 'title') { return $this->tags(ModelUtil::valueMap($R3agm, $PkGEp, $HamKI)); } public function tagModelField($R3agm, $ZyMty = 'tag', $y62lu = null) { goto o3Coe; o3Coe: $tcwC2 = ModelUtil::values($R3agm, $ZyMty); goto snSyb; snSyb: $wCoWC = array(); goto hD3x3; qDSZu: return $this->tags($wCoWC); goto kpfB3; hD3x3: foreach ($tcwC2 as $VuXfH) { goto jLc5o; qeDVi: if (empty($QO7qM)) { continue; } goto g_rRT; g_rRT: foreach ($QO7qM as $yFWLi) { $wCoWC[$yFWLi] = $yFWLi; } goto HKL0a; t7kjl: switch ($y62lu) { case self::SERIALIZE_TYPE_COLON_SEPARATED: $QO7qM = TagUtil::string2Array($VuXfH); break; default: $QO7qM = ConvertUtil::toArray($VuXfH); break; } goto qeDVi; jLc5o: $QO7qM = null; goto t7kjl; HKL0a: } goto qDSZu; kpfB3: } public function unserializeValue($VuXfH, AbstractField $dBa7F) { if (null === $VuXfH) { return $VuXfH; } switch ($this->getVariable('serializeType')) { case self::SERIALIZE_TYPE_COLON_SEPARATED: return TagUtil::string2Array($VuXfH); default: return ConvertUtil::toArray($VuXfH); } } public function serializeValue($VuXfH, $Wa8N4) { switch ($this->getVariable('serializeType')) { case self::SERIALIZE_TYPE_COLON_SEPARATED: return TagUtil::array2String($VuXfH); default: return SerializeUtil::jsonEncode($VuXfH); } } public function prepareInput($VuXfH, $Wa8N4) { switch ($this->getVariable('serializeType')) { case self::SERIALIZE_TYPE_COLON_SEPARATED: return TagUtil::string2Array($VuXfH); default: return ConvertUtil::toArray($VuXfH); } } }