<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace ModStart\Field\Concern; use Illuminate\Support\Arr; use ModStart\Core\Util\ArrayUtil; use ModStart\Core\Util\SerializeUtil; use ModStart\Field\AbstractField; use ModStart\Field\Checkbox; use ModStart\Field\Radio; use ModStart\Field\Select; use ModStart\Field\SwitchField; use ModStart\Field\Type; use ModStart\Form\Form; use ModStart\ModStart; trait CanCascadeFields { protected $whenHelps = array(); protected $conditions = array(); protected $cascadeGroups = array(); protected $cascadeParam = array(); public function when($xfg26, $VuXfH, $hB9j0 = null, $kKcR8 = array()) { goto o3rU3; p12YC: return $this; goto xXm1T; KPTm6: $this->formatValues($xfg26, $VuXfH); goto D84MR; o3rU3: if (func_num_args() == 2) { goto WR6tf; gjBeX: $xfg26 = $this->getDefaultOperator(); goto ikrP3; WR6tf: $hB9j0 = $VuXfH; goto OBYMG; OBYMG: $VuXfH = $xfg26; goto gjBeX; ikrP3: } goto LZIwk; D84MR: $this->addDependents($xfg26, $VuXfH, $hB9j0); goto p12YC; LZIwk: $this->cascadeParam = $kKcR8; goto KPTm6; xXm1T: } public function whenHelps($CpSmN) { $this->whenHelps = $CpSmN; return $this; } protected function getDefaultOperator() { if ($this instanceof Checkbox) { return 'in'; } return '='; } protected function formatValues($xfg26, &$VuXfH) { if (in_array($xfg26, array('in', 'notIn'))) { $VuXfH = SerializeUtil::jsonEncode($VuXfH); } if (is_array($VuXfH)) { $VuXfH = array_map('strval', $VuXfH); } else { if (!empty($this->cascadeParam['type'])) { switch ($this->cascadeParam['type']) { case 'boolean': $VuXfH = !!$VuXfH; break; default: $VuXfH = strval($VuXfH); break; } } else { $VuXfH = strval($VuXfH); } } } protected function addDependents($xfg26, $VuXfH, \Closure $hB9j0) { goto N7HSu; N7HSu: $kOFY1 = count($this->conditions); goto cwAMY; cwAMY: $this->conditions[] = array('operator' => $xfg26, 'value' => $VuXfH, 'closure' => $hB9j0, 'index' => $kOFY1); goto rQbIS; rQbIS: $this->context->cascadeGroup($hB9j0, array('id' => $this->id(), 'index' => $kOFY1)); goto ID5Mr; ID5Mr: } protected function addCascadeScript() { goto fl_sT; mTERf: $CeOJi = $this->id(); goto Adw5Y; qSTgw: $buHvl = 'function(v){ return v; }'; goto HBvzx; HBvzx: if (!empty($this->cascadeParam['type'])) { switch ($this->cascadeParam['type']) { case 'boolean': $buHvl = 'function(v){ return !!v; }'; break; } } goto mTERf; p2epO: $KVZzL = collect($this->conditions)->map(function ($naNXB) use(&$kOFY1) { return ArrayUtil::keepKeys($naNXB, array('operator', 'value', 'index')); })->toJson(JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES); goto GGHXq; GGHXq: $bsSQo = SerializeUtil::jsonEncode($this->whenHelps); goto qSTgw; fl_sT: if (empty($this->conditions) && empty($this->whenHelps)) { return; } goto p2epO; OeugX: ModStart::script($oKMGD); goto O2UuM; Adw5Y: $oKMGD = "(function () {\n    var valueConverter = {$buHvl};\n    var operatorTable = {\n       'in': function(a, b) {\n           b = JSON.parse(b); a = String(a);\n           for(var i=0;i<b.length;i++){\n               b[i] = String(b[i]);\n           }\n           return b.indexOf(a)>=0;\n       },\n       'includes': function(a, b){\n           if(!\$.isArray(a)){\n               a = [a];\n           }\n           return a.indexOf(b)>=0;\n       },\n       '=': function(a, b) {\n           if (\$.isArray(a) && \$.isArray(b)) {\n               return \$(a).not(b).length === 0 && \$(b).not(a).length === 0;\n           }\n           a = String(a); b = String(b);\n           var ab = [a,b].sort().join('|');\n           if(ab==='1|true'||ab==='0|false'){\n               return true;\n           }\n           return a === b;\n       },\n       '>': function(a, b) {\n           return a > b;\n       },\n       '<': function(a, b) {\n           return a < b;\n       },\n       '>=': function(a, b) { return a >= b; },\n       '<=': function(a, b) { return a <= b; },\n       '!=': function(a, b) {\n            return ! operatorTable['='](a, b);\n       }\n   };\n   var compare = function (a, b, o) {\n       if(!(o in operatorTable)){\n           console.error('unsupported operator ',o)\n       }\n       if (! \$.isArray(b) ) return operatorTable[o](a, b);\n       if (o === '!=') {\n           for (var i in b) {\n               if (! operatorTable[o](a, b[i])) return false;\n           }\n           return true;\n       }\n       for (var i in b) {\n           if (operatorTable[o](a, b[i])) return true;\n       }\n       return false;\n   };\n   var cascadeGroups = {$KVZzL};\n   var whenHelps = {$bsSQo};\n   var cascadeChange = function(value){\n       value = valueConverter(value);\n       var f = \$('#{$this->id()}');\n       var helps = [];\n       Object.keys(whenHelps).forEach(function(k){\n          if( compare(value, k, 'includes') ){\n              helps.push(whenHelps[k]);\n          }\n       });\n       var helpDom = f.find('.field > .when-help');\n       if(!helpDom.length){\n          helpDom = \$('<div class=\"help when-help\"></div>');\n          f.find('.field').append(helpDom);\n       }\n       helpDom.html(helps.join('<br />'));\n       cascadeGroups.forEach(function (group) {\n           var groupDom = \$('#{$this->id()}_group_' + group.index);\n           groupDom.addClass('cascade-group-hide');\n           groupDom.find('input,textarea,select').prop('disabled',true)\n       });\n       cascadeGroups.forEach(function (group) {\n           var groupDom = \$('#{$this->id()}_group_' + group.index);\n           var pass = compare(value, group.value, group.operator);\n           if (pass) {\n               groupDom.removeClass('cascade-group-hide');\n               groupDom.find('input,textarea,select').prop('disabled',false);\n           }\n        });\n   };\n   {$this->getFieldNormalizedScript()}\n})();"; goto OeugX; O2UuM: } protected function getFieldNormalizedScript() { if ($this->context instanceof Form) { switch (get_class($this)) { case Select::class: case Type::class: return "\$('#{$this->id()} select').on('change', function (e) {\n    cascadeChange(\$(this).val());\n}).trigger('change');"; case Radio::class: return "\$('#{$this->id()}').on('click', function (e) {\n    cascadeChange(\$('#{$this->id()} [type=radio]:checked').val());\n}).trigger('click');"; case Checkbox::class: return "\$('#{$this->id()}').on('click', function (e) {\n    var value = \$('#{$this->id()} [type=checkbox]:checked').map(function(){\n      return \$(this).val();\n    }).get();\n    cascadeChange(value);\n}).trigger('click');"; case SwitchField::class: return "\$('#{$this->id()}').on('click', function (e) {\n    cascadeChange(\$('#{$this->id()} [type=checkbox]').is(':checked')?1:0);\n}).trigger('click');"; default: throw new \InvalidArgumentException('Invalid form field type'); } } else { $VuXfH = SerializeUtil::jsonEncode($this->value); switch (get_class($this)) { case Select::class: case Type::class: return "cascadeChange({$VuXfH});"; case Radio::class: return "cascadeChange({$VuXfH});"; case Checkbox::class: return "cascadeChange({$VuXfH});"; case SwitchField::class: return "cascadeChange({$VuXfH});"; default: throw new \InvalidArgumentException('Invalid form field type'); } } } }