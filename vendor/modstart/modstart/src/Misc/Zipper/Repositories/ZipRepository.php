<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Chumper\Zipper\Repositories; use Exception; use ZipArchive; class ZipRepository implements RepositoryInterface { private $archive; public function __construct($DtpDz, $PmHYF = false, $WsBxu = null) { goto nQALf; IVmfB: if ($k0m_Z !== true) { throw new Exception("Error: Failed to open {$DtpDz}! Error: " . $this->getErrorMessage($k0m_Z)); } goto P9L3F; HS9LW: $this->archive = $WsBxu ? $WsBxu : new ZipArchive(); goto pzVez; nQALf: if (!class_exists('ZipArchive')) { throw new Exception('Error: Your PHP version is not compiled with zip support'); } goto HS9LW; pzVez: $k0m_Z = $this->archive->open($DtpDz, $PmHYF ? ZipArchive::CREATE : null); goto IVmfB; P9L3F: } public function addFile($tqD5O, $cycch) { $this->archive->addFile($tqD5O, $cycch); } public function addEmptyDir($fC631) { $this->archive->addEmptyDir($fC631); } public function addFromString($HQ4FM, $N19iJ) { $this->archive->addFromString($HQ4FM, $N19iJ); } public function removeFile($cycch) { $this->archive->deleteName($cycch); } public function getFileContent($cycch) { return $this->archive->getFromName($cycch); } public function getFileStream($cycch) { return $this->archive->getStream($cycch); } private function isUtf8($vt6fH) { return preg_match('%^(?:
      [\\x09\\x0A\\x0D\\x20-\\x7E]            # ASCII
    | [\\xC2-\\xDF][\\x80-\\xBF]             # non-overlong 2-byte
    | \\xE0[\\xA0-\\xBF][\\x80-\\xBF]         # excluding overlongs
    | [\\xE1-\\xEC\\xEE\\xEF][\\x80-\\xBF]{2}  # straight 3-byte
    | \\xED[\\x80-\\x9F][\\x80-\\xBF]         # excluding surrogates
    | \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2}      # planes 1-3
    | [\\xF1-\\xF3][\\x80-\\xBF]{3}          # planes 4-15
    | \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2}      # plane 16
)*$%xs', $vt6fH); } public function each($k_TMY) { goto HXzDp; JIqES: for ($qsK6T = 0; $qsK6T < $this->archive->numFiles; ++$qsK6T) { $Dvu61 = $this->archive->statIndex($qsK6T); if ($Dvu61['size'] === 0 && $Dvu61['crc'] === 0) { continue; } $HQ4FM = $this->archive->getNameIndex($qsK6T, 1 << 6); $iluly = mb_detect_encoding($HQ4FM, array('ASCII', 'GBK', 'UTF-8')); $jdXuk = array($iluly, $HQ4FM, $Dvu61); $nQYo_[] = $jdXuk; } goto Nu5Qv; HXzDp: $nQYo_ = array(); goto JIqES; Nu5Qv: foreach ($nQYo_ as $jdXuk) { goto uON1i; djmkJ: call_user_func_array($k_TMY, array($HQ4FM, $Dvu61)); goto VHpT8; uON1i: list($iluly, $HQ4FM, $Dvu61) = $jdXuk; goto DoSkd; DoSkd: if (!$this->isUtf8($HQ4FM)) { $HQ4FM = mb_convert_encoding($HQ4FM, 'UTF-8', $iluly); } goto djmkJ; VHpT8: } goto UO2Qc; UO2Qc: } public function fileExists($D9Isv) { return $this->archive->locateName($D9Isv) !== false; } public function usePassword($mDyAE) { return $this->archive->setPassword($mDyAE); } public function getStatus() { return $this->archive->getStatusString(); } public function close() { @$this->archive->close(); } private function getErrorMessage($ah5YF) { switch ($ah5YF) { case ZipArchive::ER_EXISTS: return 'ZipArchive::ER_EXISTS - File already exists.'; case ZipArchive::ER_INCONS: return 'ZipArchive::ER_INCONS - Zip archive inconsistent.'; case ZipArchive::ER_MEMORY: return 'ZipArchive::ER_MEMORY - Malloc failure.'; case ZipArchive::ER_NOENT: return 'ZipArchive::ER_NOENT - No such file.'; case ZipArchive::ER_NOZIP: return 'ZipArchive::ER_NOZIP - Not a zip archive.'; case ZipArchive::ER_OPEN: return 'ZipArchive::ER_OPEN - Can\'t open file.'; case ZipArchive::ER_READ: return 'ZipArchive::ER_READ - Read error.'; case ZipArchive::ER_SEEK: return 'ZipArchive::ER_SEEK - Seek error.'; default: return "An unknown error [{$ah5YF}] has occurred."; } } }