<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace ModStart\Grid; use Illuminate\Contracts\Support\Arrayable; use Illuminate\Database\Query\Builder; use Illuminate\Pagination\AbstractPaginator; use Illuminate\Support\Collection; use ModStart\Field\AbstractField; use ModStart\Repository\Repository; class Model { private $grid; private $repository; private $paginator; private $queries; private $order; private $data; private $builder; private $pageSize = 10; private $pageName = 'page'; private $page; private $usePaginate = true; private $pageSizeName = 'pageSize'; private $orderName = 'order'; public function __construct($h7Rk_, $Cxh0W = null) { goto P4Rj0; y7Esd: $this->queries = new Collection(); goto aW1bm; X1d8b: if ($Cxh0W) { $this->repository = Repository::instance($Cxh0W); } goto y7Esd; P4Rj0: $this->grid = $h7Rk_; goto X1d8b; aW1bm: } public function repository() { return $this->repository; } public function clearQuery() { if (!$this->queries->isEmpty()) { $this->queries = new Collection(); } return $this; } public function getQueries() { return $this->queries = $this->queries->unique(); } public function paginator() { $this->buildData(); return $this->paginator; } public function usePaginate($G5QUZ = true) { $this->usePaginate = $G5QUZ; } public function allowPagination() { return $this->usePaginate; } public function getPageSizeName() { return $this->pageSizeName; } public function setPageSizeName($HQ4FM) { $this->pageSizeName = $HQ4FM; return $this; } public function setPageSize(int $qp8x7) { $this->pageSize = $qp8x7; return $this; } public function setPageName(string $NWFBw) { $this->pageName = $NWFBw; return $this; } public function getPageName() { return $this->pageName; } public function getOrderName() { return $this->orderName; } public function grid() { return $this->grid; } public function buildData() { if (is_null($this->data)) { $this->setData($this->fetch()); } return $this->data; } public function setData($nx179) { goto pXxk8; z7K_t: return $this; goto XnM39; sxAsM: if ($nx179 instanceof AbstractPaginator) { $this->setPaginator($nx179); $nx179 = $nx179->items(); } elseif (is_array($nx179)) { $nx179 = collect($nx179); } elseif ($nx179 instanceof Collection) { } elseif ($nx179 instanceof Arrayable) { $nx179 = collect($nx179->toArray()); } goto ZL16b; pXxk8: if (is_callable($nx179)) { $this->builder = $nx179; return $this; } goto sxAsM; ZL16b: if ($nx179 instanceof Collection) { $this->data = $nx179; } else { $this->data = collect(); } goto z7K_t; XnM39: } public function addConditions(array $twGc7) { foreach ($twGc7 as $naNXB) { call_user_func_array(array($this, key($naNXB)), current($naNXB)); } return $this; } public function getConditionQuery() { return $this->repository->getQuery($this); } private function fetch() { goto bZLKU; wbv1l: throw new \Exception('Grid fetch error'); goto cNmlo; Xv28b: if ($AxBu3 instanceof AbstractPaginator) { $this->setPaginator($AxBu3); return $AxBu3->items(); } goto wbv1l; XsHsS: if ($this->builder && is_callable($this->builder)) { $AxBu3 = call_user_func($this->builder, $this); } else { $AxBu3 = $this->repository->get($this); } goto GeZJW; bZLKU: if ($this->paginator) { return $this->paginator->getCollection(); } goto XsHsS; GeZJW: if (is_array($AxBu3) || $AxBu3 instanceof Collection) { return $AxBu3; } goto Xv28b; cNmlo: } private function setPaginator(AbstractPaginator $iVP_b) { $this->paginator = $iVP_b; $iVP_b->setPageName($this->pageName); } public function getPage() { if (!$this->usePaginate) { return; } return $this->page = $this->repository->getArgument($this->pageName, 1); } public function setPage(int $mZ5xK) { $this->page = $mZ5xK; return $this; } public function getPageSize() { if (!$this->usePaginate) { return; } return $this->repository->getArgument('pageSize', $this->pageSize); } public function findQueryByMethod($lrQvV) { return $this->queries->first(function ($IpOIw) use($lrQvV) { return $IpOIw['method'] == $lrQvV; }); } public function setOrder($Ln38v) { $this->order = $Ln38v; } public function getOrder() { goto pV32N; tUfwb: $pLOK8 = $this->repository->getArgument('orderDefault', array()); goto ZoY4g; ip0rt: return $this->order; goto QF8lk; ZoY4g: if (empty($Ln38v)) { if (!empty($pLOK8)) { if (is_array($pLOK8[0])) { $this->order = $pLOK8; } else { $this->order = array($pLOK8); } } else { $this->order = array(array($this->repository->getKeyName(), 'desc')); } } else { goto zZnAR; T3Pvd: if (!is_array($Ln38v[0])) { $Ln38v = array($Ln38v); } goto Y9maw; zZnAR: $i5hfY = $this->grid->sortableFields()->map(function (AbstractField $dBa7F) { return $dBa7F->column(); }); goto T3Pvd; lJNBY: $this->order = $Ln38v->toArray(); goto ulIsL; Y9maw: $Ln38v = collect($Ln38v)->filter(function ($DUr2V) use($i5hfY) { return is_array($DUr2V) && count($DUr2V) === 2 && is_string($DUr2V[0]) && is_string($DUr2V[1]) && $i5hfY->contains($DUr2V[0]); })->map(function ($DUr2V) { $DUr2V[1] = strtolower($DUr2V[1]); return $DUr2V; })->filter(function ($DUr2V) { return in_array($DUr2V[1], array('asc', 'desc')); }); goto lJNBY; ulIsL: } goto ip0rt; pV32N: $Ln38v = $this->repository->getArgument('order', array()); goto tUfwb; QF8lk: } public function rejectQuery($lrQvV) { $this->queries = $this->queries->reject(function ($IpOIw) use($lrQvV) { if (is_callable($lrQvV)) { return call_user_func($lrQvV, $IpOIw); } return in_array($IpOIw['method'], (array) $lrQvV, true); }); } public function resetOrderBy() { $this->rejectQuery(array('orderBy', 'orderByDesc')); } public function __call($lrQvV, $wnXyT) { return $this->addQuery($lrQvV, $wnXyT); } public function addQuery($lrQvV, array $wnXyT = array()) { $this->queries->push(array('method' => $lrQvV, 'arguments' => $wnXyT)); return $this; } }