<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace ModStart\Grid; use Closure; use Illuminate\Support\Facades\Input; use Illuminate\Support\Facades\View; use ModStart\Core\Dao\DynamicModel; use ModStart\Core\Dao\ModelUtil; use ModStart\Core\Exception\BizException; use ModStart\Core\Input\InputPackage; use ModStart\Core\Input\Request; use ModStart\Core\Input\Response; use ModStart\Core\Util\IdUtil; use ModStart\Core\Util\RenderUtil; use ModStart\Core\Util\TreeUtil; use ModStart\Detail\Detail; use ModStart\Field\AbstractField; use ModStart\Field\Type\FieldRenderMode; use ModStart\Form\Form; use ModStart\Grid\Concerns\HasGridFilter; use ModStart\Grid\Concerns\HasItemOperate; use ModStart\Grid\Concerns\HasPaginator; use ModStart\Grid\Concerns\HasSort; use ModStart\Grid\Type\GridEngine; use ModStart\Repository\Filter\HasRepositoryFilter; use ModStart\Repository\Filter\HasScopeFilter; use ModStart\Repository\Repository; use ModStart\Support\Concern\HasBuilder; use ModStart\Support\Concern\HasFields; use ModStart\Support\Concern\HasFluentAttribute; use ModStart\Support\Manager\FieldManager; class Grid { use HasBuilder, HasFields, HasFluentAttribute, HasGridFilter, HasItemOperate, HasPaginator, HasSort, HasScopeFilter, HasRepositoryFilter; private $id; private $model; protected $fluentAttributes = array('view', 'engine', 'title', 'titleAdd', 'titleEdit', 'titleShow', 'titleImport', 'canAdd', 'canEdit', 'canDelete', 'canShow', 'canExport', 'canImport', 'canCopy', 'canMultiSelectItem', 'canSingleSelectItem', 'canBatchDelete', 'canBatchSelect', 'batchSelectInOrder', 'canSort', 'urlGrid', 'urlAdd', 'urlEdit', 'textEdit', 'urlDelete', 'urlShow', 'urlExport', 'urlImport', 'urlSort', 'addDialogSize', 'editDialogSize', 'showDialogSize', 'importDialogSize', 'addBlankPage', 'editBlankPage', 'enablePagination', 'defaultOrder', 'treeMaxLevel', 'treeRootPid', 'batchOperatePrepend', 'gridOperateAppend', 'hookPrepareItems', 'gridRowCols', 'defaultPageSize', 'pageSizes', 'gridToolbar', 'pageJumpEnable'); private $engine = 'basic'; private $title; private $titleAdd; private $titleEdit; private $titleShow; private $titleImport; private $canAdd = true; private $canEdit = true; private $canDelete = true; private $canShow = true; private $canExport = false; private $canImport = false; private $canCopy = false; private $canMultiSelectItem = false; private $canSingleSelectItem = false; private $canBatchDelete = false; private $canBatchSelect = false; private $batchSelectInOrder = false; private $canSort = false; private $urlGrid; private $urlAdd; private $urlEdit; private $textEdit; private $urlDelete; private $urlShow; private $urlExport; private $urlImport; private $urlSort; private $addDialogSize = array('95%', '95%'); private $editDialogSize = array('95%', '95%'); private $showDialogSize = array('95%', '95%'); private $importDialogSize = array('95%', '95%'); private $addBlankPage = false; private $editBlankPage = false; private $enablePagination = true; private $defaultOrder = array(); private $treeMaxLevel = 0; private $treeRootPid = 0; private $batchOperatePrepend = ''; private $gridOperateAppend = ''; private $gridRowCols = null; private $defaultPageSize = 10; private $pageSizes = array(10, 50, 100); private $gridToolbar = array(); private $pageJumpEnable = false; private $hookPrepareItems = null; private $gridTableTops = array(); private $gridRequestScript = null; private $gridBeforeRequestScript = null; private $isBuilt = false; private $isDynamicModel = false; private $dynamicModelTableName; private $view = 'modstart::core.grid.index'; private $bodyAppend = ''; public function __construct($Cxh0W = null, \Closure $GOTEy = null) { goto prYw8; JO3Dv: $this->setupFields(); goto zrUPh; cqjxB: $this->setupGridFilter(); goto zhWbz; odUTO: $this->model = new Model($this, $Cxh0W); goto JO3Dv; gNx_c: $this->setupRepositoryFilter(); goto cqjxB; zrUPh: $this->fieldDefaultRenderMode(FieldRenderMode::GRID); goto gNx_c; QuLVN: $this->builder($GOTEy); goto Tz6Qy; zhWbz: $this->setupItemOperate(); goto QuLVN; prYw8: $this->id = IdUtil::generate('Grid'); goto odUTO; Tz6Qy: } public static function make($Wa8N4, \Closure $GOTEy = null) { goto BVUBx; y4OVO: $h7Rk_ = new Grid(DynamicModel::make($Wa8N4), $GOTEy); goto zMfzW; b6gLM: return $h7Rk_; goto c8Xjg; GT7p3: $h7Rk_->dynamicModelTableName = $Wa8N4; goto b6gLM; Nds8m: if (class_exists($Wa8N4)) { if (is_subclass_of($Wa8N4, \Illuminate\Database\Eloquent\Model::class) || is_subclass_of($Wa8N4, Repository::class)) { return new Grid($Wa8N4, $GOTEy); } } goto y4OVO; zMfzW: $h7Rk_->isDynamicModel = true; goto GT7p3; BVUBx: if ($Wa8N4 && is_object($Wa8N4)) { return new Grid($Wa8N4, $GOTEy); } goto Nds8m; c8Xjg: } public function useSimple($Y8mYM) { goto b9qzf; Be4HW: $this->disableItemOperate(); goto NZS3Q; MzISX: return $this; goto RmZCF; NZS3Q: $this->display('html', 'html')->hookRendering($Y8mYM); goto MzISX; b9qzf: $this->view = 'modstart::core.grid.simple'; goto Be4HW; RmZCF: } public function asTree($PkGEp = 'id', $HuEsB = 'pid', $HwF8D = 'sort', $OyJTz = 'title') { goto VVTQq; MGckW: $this->repository()->setTreePidColumn($HuEsB); goto Z4L30; KBBnT: $this->repository()->setTreeTitleColumn($OyJTz); goto RXXBL; k4ODY: return $this; goto C8IMc; nhBB7: $this->enablePagination(false); goto kt3iy; kt3iy: $this->canSort(true); goto k4ODY; RXXBL: $this->engine = GridEngine::TREE; goto nhBB7; VVTQq: $this->repository()->setKeyName($PkGEp); goto MGckW; Z4L30: $this->repository()->setSortColumn($HwF8D); goto KBBnT; C8IMc: } public function asTreeMass($l0KTA = 0, $PkGEp = 'id', $HuEsB = 'pid', $HwF8D = 'sort', $OyJTz = 'title') { goto sqXYp; Ls4zU: $this->repository()->setTreeTitleColumn($OyJTz); goto XNkhn; XNkhn: $this->engine = GridEngine::TREE_MASS; goto Y8trp; Y8trp: $this->enablePagination(false); goto RowID; sqXYp: $this->repository()->setKeyName($PkGEp); goto mHvEN; RowID: $this->canSort(true); goto pSxqV; SYs8C: $this->repository()->setSortColumn($HwF8D); goto Ls4zU; mHvEN: $this->repository()->setTreePidColumn($HuEsB); goto SYs8C; pSxqV: return $this; goto wo9V0; wo9V0: } public function canBatchDelete($VuXfH = null) { goto p3VHT; p3VHT: if (null === $VuXfH) { return $this->canBatchDelete; } goto dtjnH; dtjnH: $this->canBatchDelete = true; goto b2tdq; b2tdq: $this->canMultiSelectItem(true); goto AzmMA; AzmMA: return $this; goto ENqb_; ENqb_: } public function canBatchSelect($VuXfH = null) { goto LRPND; LRPND: if (null === $VuXfH) { return $this->canBatchSelect; } goto IEUdW; fhIbh: $this->canMultiSelectItem(true); goto RvnAc; RvnAc: return $this; goto upNcl; IEUdW: $this->canBatchSelect = $VuXfH; goto fhIbh; upNcl: } public function batchSelectInOrder($VuXfH = null) { goto HcXn2; HcXn2: if (null === $VuXfH) { return $this->batchSelectInOrder; } goto vsfoI; JKZf2: return $this; goto qwPSa; vsfoI: $this->batchSelectInOrder = $VuXfH; goto JKZf2; qwPSa: } public function disableCUD() { $this->canAdd(false)->canEdit(false)->canDelete(false); return $this; } public function dialogSizeSmall() { return $this->addDialogSize(array('600px', '90%'))->editDialogSize(array('600px', '90%'))->showDialogSize(array('600px', '90%')); } public function repository() { return $this->model->repository(); } public function getRepositoryKeyName() { return $this->model->repository()->getKeyName(); } public function gridFilter(Closure $k_TMY) { call_user_func($k_TMY, $this->gridFilter); return $this; } public function gridRequestScript($hB9j0) { $this->gridRequestScript = $hB9j0; return $this; } public function gridBeforeRequestScriptView($de9hK) { return $this->gridBeforeRequestScript(RenderUtil::viewScript($de9hK)); } public function gridBeforeRequestScript($oKMGD) { $this->gridBeforeRequestScript = $oKMGD; return $this; } public function gridTableTopView($de9hK, $l1eNl = array()) { return $this->gridTableTop(View::make($de9hK, $l1eNl)->render()); } public function gridTableTop($N19iJ) { goto OjYzo; vGHEd: return $this; goto wZ8y5; OjYzo: if ($N19iJ instanceof Closure) { $N19iJ = call_user_func($N19iJ, $this); } goto sxV0u; sxV0u: $this->gridTableTops[] = $N19iJ; goto vGHEd; wZ8y5: } public function bodyAppend($N19iJ) { $this->bodyAppend = $N19iJ; return $this; } public function build() { if (!$this->isBuilt) { goto WwDga; WwDga: $this->runBuilder(); goto kqhW1; kqhW1: $this->prepareItemOperateField(); goto jr00F; jr00F: $this->isBuilt = true; goto lX88B; lX88B: } } public function executeQuery() { goto gj9tu; vyQwz: $this->repository()->setArgument(array('page' => $gY_Ck->getPage(), 'pageSize' => $gY_Ck->getPageSize(null, null, 1000, $this->defaultPageSize), 'order' => $gY_Ck->getArray($this->model->getOrderName()), 'orderDefault' => $this->defaultOrder)); goto YflDx; joqu4: return $this->gridFilter->executeQuery(); goto E0g8x; gj9tu: $this->build(); goto p4IvA; YflDx: $this->gridFilter->setSearch($gY_Ck->getArray('search')); goto joqu4; p4IvA: $gY_Ck = InputPackage::buildFromInput(); goto vyQwz; E0g8x: } public function request() { goto VrNEN; IblCz: $oKMGD = null; goto T0PS0; qvAIP: if ($this->engine === GridEngine::TREE_MASS) { goto dCP35; WNUL4: $qSn4I = view('modstart::core.grid.treeAncestor', array('treeAncestors' => $gxhSk, 'grid' => $this))->render(); goto UGfmi; MdM6V: $this->repository()->setArgument(array('treeRootPid' => $this->treeRootPid, 'treePid' => $tloGv)); goto DHn7l; DHn7l: if ($tloGv != $this->treeRootPid) { $gxhSk = $this->repository()->getTreeAncestorItems(); } goto WNUL4; dCP35: $tloGv = $gY_Ck->get('_pid', $this->treeRootPid); goto MdM6V; UGfmi: } goto xfmsJ; jMWcw: foreach ($this->listableFields() as $dBa7F) { goto pZovJ; EcTh5: $rWIP4[] = $jdXuk; goto uABEA; H0RMa: if ($dBa7F->tip()) { $jdXuk['title'] .= ' <a class="ub-text-muted" href="javascript:;" data-tip-popover="' . htmlspecialchars($dBa7F->tip()) . '"><i class="iconfont icon-warning"></i></a>'; } goto JCJ1Y; BNDk7: $jdXuk = array('field' => $dBa7F->column(), 'title' => $dBa7F->label(), 'sort' => $dBa7F->sortable()); goto H0RMa; pZovJ: if ($dBa7F->isLayoutField()) { continue; } goto BNDk7; JCJ1Y: if ($dBa7F->width() !== '') { $jdXuk['width'] = $dBa7F->width(); } else { $jdXuk['withAuto'] = true; } goto Ik6Um; Ik6Um: if ($dBa7F->gridFixed()) { $jdXuk['fixed'] = $dBa7F->gridFixed(); } goto EcTh5; uABEA: } goto IblCz; cJ1EK: $gxhSk = array(); goto qvAIP; t3yz_: foreach ($c0PBf as $kOFY1 => $DUr2V) { goto bDFO8; quLkB: $nQYo_[] = $jdXuk; goto W2pG7; bDFO8: $fytIH = array(); goto cdm1x; rbxCr: $jdXuk['_id'] = '' . $DUr2V->{$this->repository()->getKeyName()}; goto x0jFb; x0jFb: foreach ($this->listableFields() as $dBa7F) { goto Db1L7; R0gLS: $dBa7F->setValue($VuXfH); goto x0abw; fn7dL: if (in_array($dBa7F->column(), $fytIH) || $DUr2V instanceof \Illuminate\Database\Eloquent\Model && method_exists($DUr2V, $dBa7F->column())) { goto qK62Y; IGHOK: if ($dBa7F->hookValueUnserialize()) { $VuXfH = call_user_func($dBa7F->hookValueUnserialize(), $VuXfH, $dBa7F); } goto TSIjr; bR7K5: $dBa7F->item($DUr2V); goto IGHOK; IKqJt: $DUr2V->{$dBa7F->column()} = $VuXfH; goto YWHMQ; xD1Cx: $VuXfH = $dBa7F->unserializeValue($VuXfH, $dBa7F); goto nqrs9; qK62Y: $VuXfH = $DUr2V->{$dBa7F->column()}; goto bR7K5; nqrs9: if ($dBa7F->hookFormatValue()) { $VuXfH = call_user_func($dBa7F->hookFormatValue(), $VuXfH, $dBa7F); } goto IKqJt; TSIjr: $dBa7F->item($DUr2V); goto xD1Cx; YWHMQ: } else { goto C9BMP; C9BMP: $dBa7F->item($DUr2V); goto wgviT; wgviT: if (str_contains($dBa7F->column(), '.')) { $VuXfH = ModelUtil::traverse($DUr2V, $dBa7F->column()); } goto gqvn7; zWBdR: if ($dBa7F->hookFormatValue()) { $VuXfH = call_user_func($dBa7F->hookFormatValue(), $VuXfH, $dBa7F); } goto AsbG5; t9pSq: $VuXfH = $dBa7F->unserializeValue($VuXfH, $dBa7F); goto zWBdR; gqvn7: if ($dBa7F->hookValueUnserialize()) { $VuXfH = call_user_func($dBa7F->hookValueUnserialize(), $VuXfH, $dBa7F); } goto t9pSq; AsbG5: } goto R0gLS; pMKjL: $jdXuk[$dBa7F->column()] = $dBa7F->renderView($dBa7F, $DUr2V, $kOFY1); goto d6AuM; Db1L7: if ($dBa7F->isLayoutField()) { continue; } goto SKs9G; SKs9G: $VuXfH = null; goto fn7dL; x0abw: $dBa7F->item($DUr2V); goto pMKjL; d6AuM: if ($this->engine == GridEngine::TREE && $dBa7F->column() == $this->repository()->getTreeTitleColumn()) { $bQsNW = str_repeat('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;', $DUr2V->_level - 1) . '<a class="tree-arrow-icon ub-text-muted" href="javascript:;"><i class="icon iconfont icon-angle-right"></i></a> '; $jdXuk[$dBa7F->column()] = $bQsNW . $jdXuk[$dBa7F->column()]; } else { if ($this->engine == GridEngine::TREE_MASS && $dBa7F->column() == $this->repository()->getTreeTitleColumn()) { if (count($gxhSk) < $this->treeMaxLevel() - 1) { $ikc2A = Request::mergeQueries(array('_pid' => $jdXuk['_id'])); $jdXuk[$dBa7F->column()] = '<span class="tree-arrow-icon ub-text-muted"><i class="icon iconfont icon-angle-right"></i></span>' . '<a class="ub-text-primary" href="?' . $ikc2A . '" title="' . L('Manage') . '"><i class="icon iconfont icon-sign"></i> ' . htmlspecialchars($jdXuk[$dBa7F->column()]) . '</a>'; } else { $jdXuk[$dBa7F->column()] = '<span class="tree-arrow-icon ub-text-muted"><i class="icon iconfont icon-angle-right"></i></span>' . $jdXuk[$dBa7F->column()]; } } } goto Wdu9i; Wdu9i: } goto quLkB; cdm1x: if ($DUr2V instanceof \Illuminate\Database\Eloquent\Model) { $fytIH = array_keys($DUr2V->getAttributes()); } else { if ($DUr2V instanceof \stdClass) { $fytIH = array_keys(get_object_vars($DUr2V)); } else { BizException::throws('Grid item support Model|stdClass only'); } } goto Tsnzu; Tsnzu: $jdXuk = array(); goto rbxCr; W2pG7: } goto qYbNG; RR2bi: $this->build(); goto FIiDF; ACCiY: $nQYo_ = array(); goto t3yz_; v2x33: $this->repository()->setArgument(array('page' => $gY_Ck->getPage(), 'pageSize' => $gY_Ck->getPageSize(null, null, 1000, $this->defaultPageSize), 'order' => $gY_Ck->getArray($this->model->getOrderName()), 'orderDefault' => $this->defaultOrder)); goto cJ1EK; N0tp0: if ($this->hookPrepareItems) { $c0PBf = call_user_func($this->hookPrepareItems, $this, $c0PBf); } goto ACCiY; dne1I: return Response::jsonSuccessData(array('head' => $rWIP4, 'page' => $iVP_b ? $iVP_b->currentPage() : 1, 'pageSize' => $iVP_b ? $iVP_b->perPage() : count($nQYo_), 'total' => $iVP_b ? $iVP_b->total() : count($nQYo_), 'records' => $nQYo_, 'addition' => $qSn4I, 'script' => $oKMGD)); goto rMFcs; LMzq5: if ($this->engine == GridEngine::TREE) { goto xT0LZ; xT0LZ: $gg490 = $this->repository()->getKeyName(); goto LJSm6; zGgKp: $EW3J7 = $this->repository()->getTreeSortColumn(); goto bvsI5; LJSm6: $wuZDM = $this->repository()->getTreePidColumn(); goto zGgKp; bvsI5: $c0PBf = TreeUtil::itemsMergeLevel($c0PBf, $gg490, $wuZDM, $EW3J7); goto tJ4PC; tJ4PC: } goto gWhmj; FIiDF: $gY_Ck = InputPackage::buildFromInput(); goto v2x33; VrNEN: $qSn4I = null; goto RR2bi; HqOjs: $c0PBf = $this->gridFilter->execute(); goto LMzq5; gWhmj: $iVP_b = $this->model->paginator(); goto N0tp0; T0PS0: if (!is_null($this->gridRequestScript)) { $oKMGD = call_user_func($this->gridRequestScript, $this); } goto dne1I; xfmsJ: $this->gridFilter->setSearch($gY_Ck->getArray('search')); goto HqOjs; qYbNG: $rWIP4 = array(); goto jMWcw; rMFcs: } public function render() { goto eEtcG; TMwtf: return view($this->view, $nx179)->render(); goto FAaaW; eEtcG: $this->build(); goto MKTG4; MKTG4: $nx179 = array_merge($this->fluentAttributeVariables(), array('id' => $this->id, 'filters' => $this->gridFilter->filters(), 'hasAutoHideFilters' => $this->gridFilter->hasAutoHideFilters(), 'grid' => $this, 'scopes' => $this->scopeFilters, 'gridTableTops' => $this->gridTableTops, 'gridBeforeRequestScript' => $this->gridBeforeRequestScript, 'scopeCurrent' => Input::get('_scope', $this->scopeDefault), 'bodyAppend' => $this->bodyAppend)); goto TMwtf; FAaaW: } public function __toString() { try { return $this->render(); } catch (\Exception $l8i0J) { return $l8i0J->getMessage(); } } public function isDynamicModel() { return $this->isDynamicModel; } public function getDynamicModelTableName() { return $this->dynamicModelTableName; } public function __call($lrQvV, $wnXyT) { goto BTHBj; TiYAZ: return FieldManager::call($this, $lrQvV, $wnXyT); goto AWFQq; qFPlv: if ($this->isFluentAttribute($lrQvV)) { return $this->fluentAttribute($lrQvV, $wnXyT); } goto TiYAZ; BTHBj: switch ($lrQvV) { case 'hookSaved': case 'hookDeleting': case 'hookChanged': case 'hookDeleted': case 'hookSaving': case 'formClass': case 'gridFilter': case 'sortAddPosition': return $this; } goto qFPlv; AWFQq: } }