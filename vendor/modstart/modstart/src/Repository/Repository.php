<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace ModStart\Repository; use Doctrine\DBAL\Query\QueryBuilder; use Illuminate\Contracts\Support\Arrayable; use Illuminate\Support\Collection; use Illuminate\Support\Traits\Macroable; use ModStart\Detail\Detail; use ModStart\Form\Form; use ModStart\Grid\Model; use ModStart\Support\Concern\HasArguments; abstract class Repository implements RepositoryInterface, SortRepositoryInterface, TreeRepositoryInterface { use Macroable; use HasArguments; protected $keyName = 'id'; protected $isSoftDeletes = false; public function getKeyName() { return $this->keyName ? $this->keyName : 'id'; } public function setKeyName($PkGEp) { $this->keyName = $PkGEp; } public function getCreatedAtColumn() { return 'created_at'; } public function getUpdatedAtColumn() { return 'updated_at'; } public function isSoftDeletes() { return $this->isSoftDeletes; } public function setIsSoftDeletes($AGpuv) { $this->isSoftDeletes = $AGpuv; } public function add(Form $c9K5c) { throw new \RuntimeException('This repository does not support "add" method'); } public function editing(Form $c9K5c) { throw new \RuntimeException('This repository does not support "editing" method'); } public function edit(Form $c9K5c) { throw new \RuntimeException('This repository does not support "edit" method'); } public function show(Detail $LT01t) { throw new \RuntimeException('This repository does not support "show" method'); } public function deleting(Form $c9K5c) { throw new \RuntimeException('This repository does not support "delete" method'); } public function delete(Form $c9K5c, Arrayable $uhz5x) { throw new \RuntimeException('This repository does not support "delete" method'); } public function get(Model $Wa8N4) { throw new \RuntimeException('This repository does not support "get" method'); } public function getQuery(Model $Wa8N4) { throw new \RuntimeException('This repository dose not support "getQuery" method'); } private $sortColumn = 'sort'; public function getSortColumn() { return $this->sortColumn; } public function setSortColumn($VuXfH) { $this->sortColumn = $VuXfH; } public function sortEdit(Form $c9K5c) { throw new RuntimeException('This repository does not support "sortEdit" method.'); } private $treePidColumn = 'pid'; private $treeTitleColumn = 'title'; private $treeSortColumn = 'sort'; public function getTreePidColumn() { return $this->treePidColumn; } public function setTreePidColumn($VuXfH) { $this->treePidColumn = $VuXfH; } public function getTreeTitleColumn() { return $this->treeTitleColumn; } public function setTreeTitleColumn($VuXfH) { $this->treeTitleColumn = $VuXfH; } public function getTreeSortColumn() { return $this->treeSortColumn; } public function setTreeSortColumn($VuXfH) { $this->treeSortColumn = $VuXfH; } public function getTreeItems($bzZJF) { throw new \RuntimeException('This repository does not support "getTreeItems" method.'); } public function getTreeAncestorItems() { throw new \RuntimeException('This repository does not support "getTreeAncestorItems" method.'); } public static function make(...$eBWrF) { return new static(...$eBWrF); } public static function instance($Cxh0W, array $jrTHd = array()) { goto IigDw; IigDw: if (null === $Cxh0W) { return null; } goto nEgPK; vsV22: if ($Cxh0W instanceof \Illuminate\Database\Eloquent\Model || $Cxh0W instanceof \Illuminate\Database\Eloquent\Builder) { $Cxh0W = EloquentRepository::make($Cxh0W); } goto BqWbE; BqWbE: if (!$Cxh0W instanceof \ModStart\Repository\Repository) { $cVwn0 = is_object($Cxh0W) ? get_class($Cxh0W) : $Cxh0W; throw new \InvalidArgumentException("The class [{$cVwn0}] must be a type of [" . Repository::class . '].'); } goto Vyd3b; nEgPK: if (is_string($Cxh0W)) { $Cxh0W = new $Cxh0W($jrTHd); } goto vsV22; Vyd3b: return $Cxh0W; goto TQusD; TQusD: } }