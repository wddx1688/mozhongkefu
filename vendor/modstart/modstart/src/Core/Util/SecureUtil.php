<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace ModStart\Core\Util; use ModStart\Core\Exception\BizException; class SecureUtil { const DEFAULT_CIPHER_ALGO = 'aes-256-cbc'; const MODE_DEFAULT = 'default'; const MODE_SALTED = 'salted'; public static function aesEncode($cANPj, $nx179, $Yp6sq = false, $Meki8 = 'default') { goto fLcBg; LKmz2: if ($Yp6sq) { $ddsxu = base64_decode($ddsxu); } goto K4HhV; K4HhV: switch ($Meki8) { case self::MODE_SALTED: goto dhSC0; zL7M0: $LUp82 = openssl_random_pseudo_bytes(8); goto ShWQP; F5Zdw: $RVzlw = openssl_encrypt(urlencode($nx179), $lrQvV, $cANPj, OPENSSL_RAW_DATA, $QrXDH); goto VYnBf; f4XTG: $cANPj = substr($KLczF, 0, 32); goto ScKn3; dhSC0: $lrQvV = 'AES-256-CBC'; goto zL7M0; ShWQP: $KLczF = self::evpBytesToKey($LUp82, $cANPj); goto f4XTG; VYnBf: return base64_encode('Salted__' . $LUp82 . $RVzlw); goto JZcsv; ScKn3: $QrXDH = substr($KLczF, 32, 16); goto F5Zdw; JZcsv: default: goto uRGnI; MsCRx: $QrXDH = openssl_random_pseudo_bytes($WYJul); goto On2Rn; On2Rn: $u3liY = openssl_encrypt($nx179, self::DEFAULT_CIPHER_ALGO, $ddsxu, 0, $QrXDH); goto hjkrj; hjkrj: return base64_encode($u3liY . '::' . $QrXDH); goto UcwjY; uRGnI: $WYJul = openssl_cipher_iv_length(self::DEFAULT_CIPHER_ALGO); goto MsCRx; UcwjY: } goto dqb_z; fLcBg: $ddsxu = $cANPj; goto LKmz2; dqb_z: } public static function aesDecode($cANPj, $nx179, $Yp6sq = false) { goto Y0Ppu; nWWoz: if ($Yp6sq) { $ddsxu = base64_decode($ddsxu); } goto MltUb; Y0Ppu: BizException::throwsIfEmpty('SecureUtil.Key Empty', $cANPj); goto VYLcW; NNxn7: list($vE23x, $QrXDH) = explode('::', $nx179, 2); goto bMqqQ; jAWDL: if (strpos($nx179, 'Salted__') === 0) { goto jzm5g; IFwvC: $RVzlw = substr($nx179, 16); goto WMlm6; WMlm6: $KLczF = self::evpBytesToKey($LUp82, $cANPj); goto HKCc2; jzm5g: $LUp82 = substr($nx179, 8, 8); goto IFwvC; K5J4p: $vE23x = urldecode(openssl_decrypt($RVzlw, self::DEFAULT_CIPHER_ALGO, $cANPj, OPENSSL_RAW_DATA, $QrXDH)); goto Bs36p; HKCc2: $cANPj = substr($KLczF, 0, 32); goto V3bQx; V3bQx: $QrXDH = substr($KLczF, 32, 16); goto K5J4p; Bs36p: return $vE23x; goto aU7pU; aU7pU: } goto NNxn7; bMqqQ: return openssl_decrypt($vE23x, self::DEFAULT_CIPHER_ALGO, $ddsxu, 0, $QrXDH); goto iqTez; MltUb: $nx179 = base64_decode($nx179); goto jAWDL; VYLcW: $ddsxu = $cANPj; goto nWWoz; iqTez: } private static function evpBytesToKey($LUp82, $mDyAE) { goto PDdb3; Jd_ta: $c8SIk = ''; goto S1Hsn; Xs1v8: return $Q1D8J; goto srHDy; PDdb3: $Q1D8J = ''; goto Jd_ta; S1Hsn: while (strlen($Q1D8J) < 48) { $c8SIk = hash('md5', $c8SIk . $mDyAE . $LUp82, true); $Q1D8J .= $c8SIk; } goto Xs1v8; srHDy: } public static function encryptKey() { return config('env.ENCRYPT_KEY'); } }