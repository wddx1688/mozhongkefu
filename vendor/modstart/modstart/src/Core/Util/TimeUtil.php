<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace ModStart\Core\Util; class TimeUtil { const FORMAT_DATE = 'Y-m-d'; const FORMAT_DATETIME = 'Y-m-d H:i:s'; const PERIOD_YEAR = 24 * 3600 * 365; const PERIOD_MONTH = 24 * 3600 * 30; const PERIOD_WEEK = 24 * 3600 * 7; const PERIOD_DAY = 24 * 3600; const PERIOD_HOUR = 3600; const PERIOD_MINITE = 60; const MINUTE_PERIOD_YEAR = 24 * 60 * 365; const MINUTE_PERIOD_MONTH = 24 * 60 * 30; const MINUTE_PERIOD_WEEK = 24 * 60 * 7; const MINUTE_PERIOD_DAY = 24 * 60; const MINUTE_PERIOD_HOUR = 60; const MINUTE_PERIOD_MINITE = 1; public static function formatTimeLength($DHk5j) { goto YpOv2; m3IU4: $YkA9c[] = sprintf('%02d', $okCni); goto lf1UM; OdbCb: $TXzvn = intval($DHk5j % self::PERIOD_HOUR / self::PERIOD_MINITE); goto wsF0G; YpOv2: static $KriFX = null; goto PLNk3; PLNk3: if (null === $KriFX) { $KriFX = strtotime('2020-01-01 00:00:00'); } goto iu6sR; IEqZT: if ($E0Whh) { $YkA9c[] = sprintf('%02d', $E0Whh); } goto boGni; wsF0G: $okCni = intval($DHk5j % self::PERIOD_MINITE); goto eoRfX; lf1UM: return implode(':', $YkA9c); goto I1dE3; eoRfX: $YkA9c = array(); goto IEqZT; boGni: $YkA9c[] = sprintf('%02d', $TXzvn); goto m3IU4; iu6sR: $E0Whh = intval($DHk5j / self::PERIOD_HOUR); goto OdbCb; I1dE3: } public static function yesterdayDate() { return date('Y-m-d', time() - self::PERIOD_DAY); } public static function yesterdayStart() { return date('Y-m-d 00:00:00', time() - self::PERIOD_DAY); } public static function yesterdayEnd() { return date('Y-m-d 23:59:59', time() - self::PERIOD_DAY); } public static function todayStart() { return date('Y-m-d 00:00:00', time()); } public static function todayEnd() { return date('Y-m-d 23:59:59', time()); } public static function humanTimeLength($J7Z01, $gubO3 = 'zh') { goto dl_Pf; yXSzF: if ($J7Z01 > 0) { $YkA9c[] = $J7Z01 . $Oiy9A[$gubO3]['s']; } goto UtjTo; zuUIY: if ($J7Z01 >= self::PERIOD_DAY) { goto J37qT; J37qT: $yFWLi = intval($J7Z01 / self::PERIOD_DAY); goto sb33k; sb33k: $YkA9c[] = $yFWLi . $Oiy9A[$gubO3]['d']; goto upgUO; upgUO: $J7Z01 %= self::PERIOD_DAY; goto H0uNy; H0uNy: } goto LkDuM; u_YUH: $YkA9c = array(); goto zuUIY; dl_Pf: $Oiy9A = array('zh' => array('d' => '天', 'h' => '小时', 'm' => '分钟', 's' => '秒'), 'en' => array('d' => 'd', 'h' => 'h', 'm' => 'm', 's' => 's')); goto u_YUH; jYzur: if ($J7Z01 >= self::PERIOD_MINITE) { goto z5W2k; IwPVs: $J7Z01 %= self::PERIOD_MINITE; goto Rvto5; Fi8DJ: $YkA9c[] = $yFWLi . $Oiy9A[$gubO3]['m']; goto IwPVs; z5W2k: $yFWLi = intval($J7Z01 / self::PERIOD_MINITE); goto Fi8DJ; Rvto5: } goto yXSzF; LkDuM: if ($J7Z01 >= self::PERIOD_HOUR) { goto OgNrs; OB9v9: $J7Z01 %= self::PERIOD_HOUR; goto iFt47; OgNrs: $yFWLi = intval($J7Z01 / self::PERIOD_HOUR); goto HE_zJ; HE_zJ: $YkA9c[] = $yFWLi . $Oiy9A[$gubO3]['h']; goto OB9v9; iFt47: } goto jYzur; UtjTo: return join('', $YkA9c); goto a9Hj4; a9Hj4: } public static function date() { return date(self::FORMAT_DATE, time()); } public static function now() { return date(self::FORMAT_DATETIME, time()); } public static function dateCollection($kyZg_, $NMr5j) { goto kO7w2; dCwDy: return $vTIfD; goto BhbsG; Lfbu7: for ($qsK6T = $kyZg_; $qsK6T <= $NMr5j; $qsK6T += self::PERIOD_DAY) { $vTIfD[] = date('Y-m-d', $qsK6T); } goto dCwDy; kO7w2: if (!is_numeric($kyZg_)) { $kyZg_ = strtotime($kyZg_); } goto RXmPt; RXmPt: if (!is_numeric($NMr5j)) { $NMr5j = strtotime($NMr5j); } goto Y_IMx; DG4_3: $vTIfD = array(); goto Lfbu7; Y_IMx: if ($kyZg_ > $NMr5j || $kyZg_ <= 0 || $NMr5j <= 0) { return array(); } goto DG4_3; BhbsG: } public static function format($UomWP, $qu8nX = null) { if (null === $qu8nX) { $qu8nX = self::FORMAT_DATETIME; } return date($qu8nX, $UomWP); } public static function isBefore($UomWP, $MWlVO) { return $UomWP < time() - $MWlVO; } public static function getBeforeTimestamp($MWlVO) { return time() - $MWlVO; } public static function getBeforeDatetime($MWlVO) { return date(self::FORMAT_DATETIME, self::getBeforeTimestamp($MWlVO)); } public static function isDatetimeEmpty($IwDsa) { goto UyEz3; d27pA: if (empty($UomWP) || $UomWP < 0) { return true; } goto Yvqom; UyEz3: $UomWP = strtotime($IwDsa); goto d27pA; Yvqom: return false; goto eduX2; eduX2: } public static function isDateEmpty($vTIfD) { goto gPFVI; PBGw_: return false; goto WE1AP; gPFVI: $UomWP = strtotime($vTIfD); goto Y3NF9; Y3NF9: if (empty($UomWP) || $UomWP < 0) { return true; } goto PBGw_; WE1AP: } public static function isTimeEmpty($FU6n6) { goto k8aky; s45K3: if (empty($UomWP) || $UomWP < 0) { return true; } goto Okap2; k8aky: $UomWP = strtotime('2019-01-01 ' . $FU6n6); goto s45K3; Okap2: return false; goto we01L; we01L: } public static function isDateExpired($CqqOx) { goto aqSg5; iUy5O: if (strtotime($CqqOx) < time()) { return true; } goto Alw9Q; aqSg5: if (self::isDateEmpty($CqqOx)) { return false; } goto iUy5O; Alw9Q: return false; goto gsZIT; gsZIT: } public static function nextExpireTimestamp($S0wnp, $Ziys7, $qu8nX = 'Y-m-d') { goto xV24k; xV24k: $KriFX = time(); goto jipHj; MzLSc: if (!empty($S0wnp) && $qsK6T > 0) { $KriFX = $qsK6T + $Ziys7; } else { $KriFX += $Ziys7; } goto e83h1; e83h1: return date($qu8nX, $KriFX); goto g16F4; jipHj: $qsK6T = strtotime($S0wnp); goto MzLSc; g16F4: } public static function isInRange($aibkj, $pzyNL) { goto O5gEu; FP9tf: return true; goto i10zD; eDDzE: if (!self::isDatetimeEmpty($pzyNL)) { $pzyNL = strtotime($pzyNL); if ($KriFX > $pzyNL) { return false; } } goto FP9tf; O5gEu: $KriFX = time(); goto ttOUD; ttOUD: if (!self::isDatetimeEmpty($aibkj)) { $aibkj = strtotime($aibkj); if ($KriFX < $aibkj) { return false; } } goto eDDzE; i10zD: } public static function periodToSecond($MWlVO) { goto Dzg76; NgH0j: if (isset($YkA9c[1])) { $DHk5j += intval($YkA9c[1]) * 60; } goto W0hOL; JmmPZ: if (isset($YkA9c[0])) { $DHk5j += intval($YkA9c[0]) * 3600; } goto NgH0j; W0hOL: if (isset($YkA9c[2])) { $DHk5j += intval($YkA9c[1]); } goto uGQeD; fpWPG: $YkA9c = explode(':', $MWlVO); goto JmmPZ; uGQeD: return $DHk5j; goto iqV3v; Dzg76: $DHk5j = 0; goto fpWPG; iqV3v: } public static function microtime() { return intval(microtime(true) * 1000000); } public static function millitime() { return intval(microtime(true) * 1000); } private static $monitor = array(); public static function monitorTick($HQ4FM = 'Default') { if (!isset(self::$monitor[$HQ4FM])) { self::$monitor[$HQ4FM] = self::millitime(); } return self::millitime() - self::$monitor[$HQ4FM]; } }