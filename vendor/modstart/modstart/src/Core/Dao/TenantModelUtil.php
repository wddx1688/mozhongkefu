<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace ModStart\Core\Dao; use Illuminate\Database\Eloquent\Model; use Illuminate\Database\Query\Builder; use Illuminate\Support\Facades\Cache; use Illuminate\Support\Facades\Config; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Schema; use ModStart\Core\Util\MemCacheUtil; class TenantModelUtil { private static function tenant($KCoHY) { return MemCacheUtil::remember("TT:{$KCoHY}", function () use($KCoHY) { return Cache::remember("TT:{$KCoHY}", 60, function () use($KCoHY) { return ModelUtil::get('tenant', array('tenant' => $KCoHY), array('connectionId', 'type')); }); }); } private static function connection($KCoHY) { goto IQn9m; L8aed: Config::set('database.connections.mysql_tenant_' . $KCoHY, array('driver' => 'mysql', 'host' => $baCt2['host'], 'database' => $baCt2['database'], 'username' => $baCt2['username'], 'password' => $baCt2['password'], 'charset' => config('database.connections.mysql.charset'), 'collation' => config('database.connections.mysql.collation'), 'prefix' => config('database.connections.mysql.prefix'), 'strict' => config('database.connections.mysql.strict'))); goto uB1JU; uB1JU: return 'mysql_tenant_' . $KCoHY; goto hzZd0; tKqp8: if (empty($baCt2)) { return 'mysql'; } goto L8aed; IQn9m: $baCt2 = MemCacheUtil::remember("TC:{$KCoHY}", function () use($KCoHY) { return Cache::remember("TC:{$KCoHY}", 60, function () use($KCoHY) { $tM49X = self::tenant($KCoHY); if (empty($tM49X)) { return null; } return ModelUtil::get('tenant_connection', array('id' => $tM49X['connectionId']), array('host', 'database', 'username', 'password')); }); }); goto tKqp8; hzZd0: } public static function table($KCoHY, $R3agm) { goto h83QQ; h83QQ: $tM49X = self::tenant($KCoHY); goto lyiMe; Cmjlj: return $R3agm; goto n4SS6; lyiMe: if ($tM49X && $tM49X['type'] === TenantType::PREFIXED) { return "t_{$KCoHY}_{$R3agm}"; } goto Cmjlj; n4SS6: } public static function DBconnection($KCoHY) { return DB::connection(self::connection($KCoHY)); } public static function DBStatement($KCoHY, $N4nxN) { self::DBconnection($KCoHY)->statement($N4nxN); } public static function ddlHasTable($KCoHY, $R3agm) { return self::DBconnection($KCoHY)->getSchemaBuilder()->hasTable(self::table($KCoHY, $R3agm)); } public static function ddlFieldTypeIsCorrect($B0X6d) { goto bF3GZ; GzZ9K: return false; goto cM0G0; yoeFp: if (preg_match('/^DATE$/', $B0X6d)) { return true; } goto Xi1jX; Xi1jX: if (preg_match('/^DATETIME$/', $B0X6d)) { return true; } goto QzQQk; BIhPL: if (preg_match('/^DECIMAL\\(\\d+,\\d+\\)$/', $B0X6d)) { return true; } goto yoeFp; bF3GZ: if (preg_match('/^INT$/', $B0X6d)) { return true; } goto BIhPL; T7do7: if (preg_match('/^VARCHAR\\(\\d+\\)$/', $B0X6d)) { return true; } goto ayAxz; ayAxz: if (preg_match('/^TEXT$/', $B0X6d)) { return true; } goto GzZ9K; QzQQk: if (preg_match('/^TIME/', $B0X6d)) { return true; } goto T7do7; cM0G0: } public static function ddlFieldAdd($KCoHY, $R3agm, $BC2Wv, $B0X6d) { goto ObD29; HnZPd: self::DBStatement($KCoHY, $N4nxN); goto nO9uC; VRuIw: if (!preg_match('/^[a-z][a-zA-Z0-9_]+$/', $BC2Wv)) { throw new \Exception('DDL fieldName error'); } goto oxle2; ObD29: if (!preg_match('/^[a-z][a-zA-Z0-9_]+$/', $R3agm)) { throw new \Exception('DDL table error'); } goto VRuIw; oxle2: if (!self::ddlFieldTypeIsCorrect($B0X6d)) { throw new \Exception('DDL fieldType error : ' . $B0X6d); } goto CME8z; aE2YR: $N4nxN = "ALTER TABLE `{$R3agm}` ADD `{$BC2Wv}` {$B0X6d} DEFAULT NULL"; goto HnZPd; CME8z: $R3agm = self::table($KCoHY, $R3agm); goto aE2YR; nO9uC: } public static function ddlFieldChange($KCoHY, $R3agm, $xtLi7, $BC2Wv, $B0X6d) { goto FOj9V; FOj9V: if (!preg_match('/^[a-z][a-zA-Z0-9_]+$/', $R3agm)) { throw new \Exception('DDL table error'); } goto mehkW; eu1jd: if (!preg_match('/^[a-z][a-zA-Z0-9_]+$/', $BC2Wv)) { throw new \Exception('DDL fieldName error'); } goto TX9R4; mehkW: if (!preg_match('/^[a-z][a-zA-Z0-9_]+$/', $xtLi7)) { throw new \Exception('DDL fieldNameOld error'); } goto eu1jd; TX9R4: if (!self::ddlFieldTypeIsCorrect($B0X6d)) { throw new \Exception('DDL fieldType error : ' . $B0X6d); } goto PyJAL; PyJAL: $R3agm = self::table($KCoHY, $R3agm); goto eGu0O; eGu0O: $N4nxN = "ALTER TABLE `{$R3agm}` CHANGE `{$xtLi7}` `{$BC2Wv}` {$B0X6d} DEFAULT NULL"; goto vRSE_; vRSE_: self::DBStatement($KCoHY, $N4nxN); goto yDG8W; yDG8W: } public static function ddlFieldModify($KCoHY, $R3agm, $BC2Wv, $B0X6d) { goto Ldq1z; T8iZk: $R3agm = self::table($KCoHY, $R3agm); goto PePY0; spQ2p: if (!preg_match('/^[a-z][a-zA-Z0-9_]+$/', $BC2Wv)) { throw new \Exception('DDL fieldName error'); } goto gi_Gl; Ldq1z: if (!preg_match('/^[a-z][a-zA-Z0-9_]+$/', $R3agm)) { throw new \Exception('DDL table error'); } goto spQ2p; gi_Gl: if (!self::ddlFieldTypeIsCorrect($B0X6d)) { throw new \Exception('DDL fieldType error : ' . $B0X6d); } goto T8iZk; PePY0: $N4nxN = "ALTER TABLE `{$R3agm}` MODIFY `{$BC2Wv}` {$B0X6d} DEFAULT NULL"; goto Ig45y; Ig45y: self::DBStatement($KCoHY, $N4nxN); goto pAuLp; pAuLp: } public static function ddlFieldDrop($KCoHY, $R3agm, $BC2Wv) { goto XNdQ4; MTvhq: if (!preg_match('/^[a-z][a-zA-Z0-9_]+$/', $BC2Wv)) { throw new \Exception('DDL fieldName error'); } goto dA_0i; XNdQ4: if (!preg_match('/^[a-z][a-zA-Z0-9_]+$/', $R3agm)) { throw new \Exception('DDL table error'); } goto MTvhq; yk3Rt: self::DBStatement($KCoHY, $N4nxN); goto uru2K; dA_0i: $R3agm = self::table($KCoHY, $R3agm); goto awRO9; awRO9: $N4nxN = "ALTER TABLE `{$R3agm}` DROP `{$BC2Wv}`"; goto yk3Rt; uru2K: } public static function connectionAutoAssign($KCoHY, $EY7Cx = TenantType::PREFIXED) { goto HDX0d; QdQHa: return true; goto NEfps; xTkmx: if (!empty($tM49X)) { return true; } goto X12D5; X12D5: $baCt2 = ModelUtil::model('tenant_connection')->where('available', '>', 0)->orderBy('priority', 'asc')->first(); goto oj5ju; UMu2x: Cache::forget("TT:{$KCoHY}"); goto TbJGs; oj5ju: if (empty($baCt2)) { ModelUtil::insert('tenant', array('tenant' => $KCoHY, 'connectionId' => 0, 'type' => $EY7Cx)); return true; } goto CT1xA; HDX0d: $tM49X = ModelUtil::get('tenant', array('tenant' => $KCoHY), array('connectionId', 'type')); goto xTkmx; TbJGs: Cache::forget("TC:{$KCoHY}"); goto QdQHa; r4QJ6: ModelUtil::update('tenant_connection', $baCt2->id, array('used' => ModelUtil::count('tenant', array('connectionId' => $baCt2->id)), 'available' => $baCt2->available - 1)); goto UMu2x; CT1xA: ModelUtil::insert('tenant', array('tenant' => $KCoHY, 'connectionId' => $baCt2->id, 'type' => $EY7Cx)); goto r4QJ6; NEfps: } public static function migrates($pwPuM, $R3agm, $WlN07) { goto vX4xt; vX4xt: if (empty($pwPuM)) { return; } goto fK6fk; Bg0CD: foreach ($pwPuM as $KCoHY) { goto gtSRP; VdMX5: $WlN07($nzo1s, Schema::connection($wDWlh)); goto uotd9; gtSRP: $nzo1s = self::table($KCoHY, $R3agm); goto ARF3r; ARF3r: $wDWlh = self::connection($KCoHY); goto VdMX5; uotd9: } goto a4bJW; fK6fk: if (!is_array($pwPuM)) { $pwPuM = array($pwPuM); } goto Bg0CD; a4bJW: } public static function model($KCoHY, $Wa8N4) { goto aVUYl; fcob6: $AkyhD->setConnection(self::connection($KCoHY)); goto qLyqf; qLyqf: return $AkyhD; goto zS2NY; aVUYl: $AkyhD = new DynamicModel(); goto wq2it; wq2it: $AkyhD->setTable(self::table($KCoHY, $Wa8N4)); goto fcob6; zS2NY: } public static function modelTenant($KCoHY, $cMVV8) { goto pEGyT; pEGyT: $AkyhD = new DynamicModel(); goto BFsBt; uCpvW: return $AkyhD; goto i22rL; BFsBt: $AkyhD->setTable($cMVV8); goto t84QG; t84QG: $AkyhD->setConnection(self::connection($KCoHY)); goto uCpvW; i22rL: } public static function all($KCoHY, $Wa8N4, $kNTjB = array(), $Px5Cq = array('*'), $Ln38v = null) { if ($Ln38v) { return self::model($KCoHY, $Wa8N4)->where($kNTjB)->orderBy($Ln38v[0], $Ln38v[1])->get($Px5Cq)->toArray(); } return self::model($KCoHY, $Wa8N4)->where($kNTjB)->get($Px5Cq)->toArray(); } public static function allIn($KCoHY, $Wa8N4, $dBa7F, $TjpEr, $Px5Cq = array('*')) { return self::model($KCoHY, $Wa8N4)->whereIn($dBa7F, $TjpEr)->get($Px5Cq)->toArray(); } public static function get($KCoHY, $Wa8N4, $kNTjB, $Px5Cq = array('*')) { goto X24ts; NSQVB: return $AkyhD->toArray(); goto CFfOK; MdoHe: if (empty($AkyhD)) { return null; } goto NSQVB; ZtyVm: $AkyhD = self::model($KCoHY, $Wa8N4)->where($kNTjB)->first($Px5Cq); goto MdoHe; X24ts: if (is_string($kNTjB) || is_numeric($kNTjB)) { $kNTjB = array('id' => $kNTjB); } goto ZtyVm; CFfOK: } public static function exists($KCoHY, $Wa8N4, $kNTjB) { return null != self::get($KCoHY, $Wa8N4, $kNTjB); } public static function insert($KCoHY, $Wa8N4, $nx179) { goto IkWvJ; CoGks: foreach ($nx179 as $dKmL2 => $yFWLi) { $AkyhD->{$dKmL2} = $yFWLi; } goto u8f1r; u8f1r: $AkyhD->save(); goto WfKA9; IkWvJ: $AkyhD = self::model($KCoHY, $Wa8N4); goto CoGks; WfKA9: return $AkyhD->toArray(); goto q7Cxk; q7Cxk: } public static function delete($KCoHY, $Wa8N4, $kNTjB) { if (is_string($kNTjB) || is_numeric($kNTjB)) { $kNTjB = array('id' => $kNTjB); } return self::model($KCoHY, $Wa8N4)->where($kNTjB)->delete(); } public static function update($KCoHY, $Wa8N4, $kNTjB, $nx179) { goto QavoC; HF5vn: return self::model($KCoHY, $Wa8N4)->where($kNTjB)->update($nx179); goto T8Awm; huysv: if (is_string($kNTjB) || is_numeric($kNTjB)) { $kNTjB = array('id' => $kNTjB); } goto XTsKE; QavoC: if (empty($kNTjB)) { return null; } goto huysv; XTsKE: if (empty($nx179)) { return null; } goto HF5vn; T8Awm: } public static function count($KCoHY, $Wa8N4, $kNTjB = array()) { if (is_string($kNTjB) || is_numeric($kNTjB)) { $kNTjB = array('id' => $kNTjB); } return self::model($KCoHY, $Wa8N4)->where($kNTjB)->count(); } public static function paginate($KCoHY, $Wa8N4, $mZ5xK, $qp8x7, $mH3Yd = array()) { goto bIVYF; L_5c9: ModelUtil::paginateMergeConditionParam($AkyhD, $mH3Yd); goto HH4nS; aiYRF: return array('total' => $AkyhD['total'], 'records' => $AkyhD['data']); goto lZS2S; Vtevl: $dTTKM = self::table($KCoHY, $Wa8N4); goto UTxWh; Hmcdj: $AkyhD = $AkyhD->paginate($qp8x7, array('*'), 'page', $mZ5xK)->toArray(); goto aiYRF; CiHcV: if (!empty($mH3Yd['fields'])) { $AkyhD = $AkyhD->select($mH3Yd['fields']); } goto Hmcdj; bIVYF: $AkyhD = self::model($KCoHY, $Wa8N4); goto Vtevl; HH4nS: if (!empty($mH3Yd['order'])) { if (is_array($mH3Yd['order'][0])) { foreach ($mH3Yd['order'] as &$Ln38v) { $AkyhD = $AkyhD->orderBy($Ln38v[0], $Ln38v[1]); } } else { $AkyhD = $AkyhD->orderBy($mH3Yd['order'][0], $mH3Yd['order'][1]); } } goto CiHcV; UTxWh: if (!empty($mH3Yd['joins'])) { goto GTJ9m; GTJ9m: $Nqp7v = array(); goto M00rM; M00rM: if (empty($mH3Yd['fields'])) { $Nqp7v[] = $dTTKM . '.*'; } goto vlUK8; Cp7BS: if (!empty($Nqp7v)) { $AkyhD = call_user_func_array(array($AkyhD, 'select'), $Nqp7v); } goto Kh6R2; vlUK8: foreach ($mH3Yd['joins'] as $SdLqb) { if (!empty($SdLqb['table'])) { $AkyhD = $AkyhD->leftJoin($SdLqb['table'][0], $SdLqb['table'][1], $SdLqb['table'][2], $SdLqb['table'][3]); if (!empty($SdLqb['fields'])) { foreach ($SdLqb['fields'] as $QGmtb => $n_Dgi) { array_push($Nqp7v, "{$n_Dgi} as {$QGmtb}"); } } } } goto Cp7BS; Kh6R2: } goto L_5c9; lZS2S: } public static function join($KCoHY, &$nx179, $zvb11 = 'userId', $iCuCK = '_user', $Wa8N4 = 'join_model', $cZbgx = 'id') { goto iLnDH; BbaJZ: foreach ($nx179 as &$DUr2V) { $cANPj = $DUr2V[$zvb11]; if (isset($S_pUg[$cANPj])) { $DUr2V[$iCuCK] = $S_pUg[$cANPj]; } else { $DUr2V[$iCuCK] = null; } } goto uUSrW; cIyMm: $A2S3q = self::model($KCoHY, $Wa8N4)->whereIn($cZbgx, $iUHLt)->get()->toArray(); goto O497g; O497g: $S_pUg = array_build($A2S3q, function ($dKmL2, $yFWLi) use($cZbgx) { return array($yFWLi[$cZbgx], $yFWLi); }); goto BbaJZ; NfTZ4: $iUHLt = array_map(function ($DUr2V) use($zvb11) { return $DUr2V[$zvb11]; }, $nx179); goto cIyMm; iLnDH: if (empty($nx179)) { return; } goto NfTZ4; uUSrW: } }