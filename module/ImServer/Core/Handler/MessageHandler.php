<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Module\ImServer\Core\Handler; use GatewayWorker\Lib\Gateway; use Module\ImServer\Core\Amqp\Amqp; use Module\ImServer\Core\GatewayUtil; use Module\ImServer\Core\Message\ChatMsg; use Module\ImServer\Core\Model\ChatRecordModel; use Module\ImServer\Core\Model\GroupModel; use Module\ImServer\Core\Model\ServiceModel; use Module\ImServer\Core\Model\UserFriendModel; use Module\ImServer\Core\Model\UserModel; use Module\ImServer\Core\Repository\TalkRepository; use Module\ImServer\Core\Repository\UnreadMsgRepository; use Module\ImServer\Type\ImChatType; use Module\ImServer\Type\ImPushType; use Module\ImServer\Type\ImTalkType; class MessageHandler { public static function onUnreadClear($U1CFU, ChatMsg $miOiF) { goto n5eKi; n5eKi: $wtt04 = $miOiF->getDataType(ImChatType::class, 'chatType'); goto oSs0w; oSs0w: $GwH5l = $miOiF->getDataInteger('toId'); goto iqTln; l2z_q: UnreadMsgRepository::clear($wtt04, $GwH5l, $miOiF->getContextUser('id')); goto Qr2OU; Qr2OU: GatewayUtil::sendCurrent(ChatMsg::makePush(ImPushType::UnreadUpdate, array('chatType' => $wtt04, 'toId' => $GwH5l, 'count' => 0))); goto iSmcZ; iqTln: if (empty($wtt04) || empty($GwH5l)) { GatewayUtil::sendCurrentError('Param missing'); return; } goto l2z_q; iSmcZ: } public static function onInput($U1CFU, ChatMsg $miOiF) { goto YN27p; X2Tjd: $GwH5l = $miOiF->getDataInteger('toId'); goto BdF4Q; zv4hG: $miOiF->data(array('userId' => $qzstR, 'toId' => $GwH5l)); goto F31rl; BdF4Q: if (!$GwH5l) { GatewayUtil::sendCurrentError('Param toId missing'); return; } goto NWJvO; NWJvO: if (!UserFriendModel::isFriend($qzstR, $GwH5l)) { Gateway::sendToCurrentClient(ChatMsg::makeError("Not Friend [{$qzstR},{$GwH5l}]")->toJson()); return; } goto zv4hG; F31rl: Amqp::sendMsg($miOiF); goto XDoAu; LwsoK: $qzstR = $t9mtn['id']; goto X2Tjd; YN27p: $t9mtn = $miOiF->getContextValue('user'); goto LwsoK; XDoAu: } public static function onTalk($U1CFU, ChatMsg $miOiF) { goto MMuRs; kgsg8: switch ($wtt04) { case ImChatType::SERVICE: goto Rfor1; Rfor1: $W2oYF = ServiceModel::listUsers($GwH5l); goto Q50eD; Q50eD: foreach ($W2oYF as $zcWCd) { if ($zcWCd['userId'] == $qzstR) { continue; } UnreadMsgRepository::increase($wtt04, $GwH5l, $zcWCd['userId']); } goto hjVTN; hjVTN: break; goto v2Xf8; v2Xf8: } goto dOFom; t6Xxs: switch ($PDS0J) { case ImTalkType::TEXT: goto HS5w1; HS5w1: $n3GvS = array('text' => $miOiF->getDataTrimString('text')); goto RgzpF; RgzpF: if (empty($n3GvS['text'])) { Gateway::sendToCurrentClient(ChatMsg::makeError('Param text empty')->toJson()); return; } goto sK0El; QJp47: break; goto hwgZW; sK0El: $f8YsO = mb_substr($n3GvS['text'], 0, 30); goto QJp47; hwgZW: case ImTalkType::IMAGE: goto F8yh9; fIRYO: if (empty($n3GvS['url'])) { Gateway::sendToCurrentClient(ChatMsg::makeError('Param url empty')->toJson()); return; } goto gGCEn; F8yh9: $n3GvS = array('url' => $miOiF->getDataTrimString('url')); goto fIRYO; ZPUr_: break; goto bbFZD; gGCEn: $f8YsO = '[图片]'; goto ZPUr_; bbFZD: } goto e__kc; ca7Fy: if (!$GwH5l) { Gateway::sendToCurrentClient(ChatMsg::makeError('Param toId missing')->toJson()); return; } goto cMK05; c5pVQ: if (!$PDS0J) { Gateway::sendToCurrentClient(ChatMsg::makeError('Param talkType error')->toJson()); return; } goto OCQvo; QobhW: $n3GvS = array(); goto t6Xxs; OCQvo: $f8YsO = ''; goto QobhW; ttoj0: $qzstR = $t9mtn['id']; goto bMXzw; gCsIm: if (!$wtt04) { Gateway::sendToCurrentClient(ChatMsg::makeError('Param chatType error')->toJson()); return; } goto fV4O1; fV4O1: $GwH5l = $miOiF->getDataInteger('toId'); goto ca7Fy; Azf0a: Amqp::sendMsg($miOiF); goto WUxy4; SkSUg: $oNagc = ChatRecordModel::create(array('chatType' => $wtt04, 'talkType' => $PDS0J, 'userId' => $qzstR, 'toId' => $GwH5l, 'content' => $n3GvS)); goto vIY6G; cMK05: $PDS0J = $miOiF->getDataType(ImTalkType::class, 'talkType'); goto c5pVQ; e__kc: if (empty($n3GvS)) { Gateway::sendToCurrentClient(ChatMsg::makeError("Param talkType not support [{$PDS0J}]")->toJson()); return; } goto Zm0iB; y91kz: $h57KV = UserModel::get($qzstR); goto SkSUg; dOFom: $miOiF->data(array('chatType' => $wtt04, 'userId' => $qzstR, 'user' => $h57KV, 'toId' => $GwH5l, 'chatRecordId' => $oNagc['id'])); goto Azf0a; vIY6G: TalkRepository::updateLastTalk($wtt04, $qzstR, $GwH5l, $f8YsO); goto kgsg8; Zm0iB: switch ($wtt04) { case ImChatType::SINGLE: if (!UserFriendModel::isFriend($qzstR, $GwH5l)) { Gateway::sendToCurrentClient(ChatMsg::makeError("Not Friend [{$qzstR},{$GwH5l}]")->toJson()); return; } break; case ImChatType::GROUP: goto W6W3u; Nvlyh: if ($vJ3Zt['isQuit']) { Gateway::sendToCurrentClient(ChatMsg::makeError("Has Quit Group [{$GwH5l},{$qzstR}]")->toJson()); return; } goto QVa1d; QVa1d: break; goto STfCv; W6W3u: $vJ3Zt = GroupModel::getUser($GwH5l, $qzstR); goto rraQ8; rraQ8: if (!$vJ3Zt) { Gateway::sendToCurrentClient(ChatMsg::makeError("Not Your Group [{$GwH5l},{$qzstR}]")->toJson()); return; } goto Nvlyh; STfCv: case ImChatType::SERVICE: goto SZbWq; SZbWq: $zcWCd = ServiceModel::getUser($GwH5l, $qzstR); goto ddkpK; ddkpK: if (!$zcWCd) { Gateway::sendToCurrentClient(ChatMsg::makeError("Not Your Service [{$GwH5l},{$qzstR}]")->toJson()); return; } goto K0M93; K0M93: break; goto dj5Om; dj5Om: } goto y91kz; MMuRs: $t9mtn = $miOiF->getContextValue('user'); goto ttoj0; bMXzw: $wtt04 = $miOiF->getDataType(ImChatType::class, 'chatType'); goto gCsIm; WUxy4: } public static function onRecall($U1CFU, ChatMsg $miOiF) { goto Pv9_0; Yiblg: $lhv9c = $miOiF->getDataInteger('chatRecordId'); goto wv1FV; gLDzI: if ($oNagc['userId'] != $qzstR) { Gateway::sendToCurrentClient(ChatMsg::makeError('chatRecord not yours')->toJson()); return; } goto JgZho; nvVI2: $oNagc = ChatRecordModel::get($lhv9c); goto lYeIa; JgZho: $miOiF->data(array('userId' => $qzstR, 'chatRecordId' => $lhv9c)); goto uV8Uz; Pv9_0: $t9mtn = $miOiF->getContextValue('user'); goto c_Koc; c_Koc: $qzstR = $t9mtn['id']; goto Yiblg; uV8Uz: Amqp::sendMsg($miOiF); goto g8afk; wv1FV: if (!$lhv9c) { Gateway::sendToCurrentClient(ChatMsg::makeError('Param chatRecordId error')->toJson()); return; } goto nvVI2; lYeIa: if (!$oNagc) { Gateway::sendToCurrentClient(ChatMsg::makeError('chatRecord not exists')->toJson()); return; } goto gLDzI; g8afk: } }