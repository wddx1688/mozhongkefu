<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Module\ImServer\Core\Handler; use GatewayWorker\Lib\Gateway; use ModStart\Core\Input\InputPackage; use Module\ImServer\Core\Amqp\Amqp; use Module\ImServer\Core\GatewayUtil; use Module\ImServer\Core\Listener\RequestListenerProvider; use Module\ImServer\Core\Message\ChatMsg; use Module\ImServer\Core\Model\GroupModel; use Module\ImServer\Core\Model\ServiceModel; use Module\ImServer\Core\Repository\GroupRepository; use Module\ImServer\Core\Repository\LogRepository; use Module\ImServer\Core\Repository\ServerRepository; use Module\ImServer\Core\Repository\ServiceRepository; use Module\ImServer\Core\Repository\UserAuthRepository; use Module\ImServer\Core\Repository\UserBinderRepository; use Module\ImServer\Type\ImMsgType; use Workerman\Lib\Timer; class WebsocketHandler { public static function onWorkerStart($ca233) { goto JA1Jg; JA1Jg: LogRepository::log('WorkerStart', get_class($ca233)); goto upHsk; TiA_G: Timer::add(15, function () { ServerRepository::register(); }); goto mUUan; upHsk: ServerRepository::register(); goto TiA_G; mUUan: } public static function onWorkerStop($ca233) { LogRepository::log('WorkerStop', get_class($ca233)); ServerRepository::unregister(); } public static function onWebSocketConnect($U1CFU, $XWlC_) { goto zy2tD; aHzeA: LogRepository::log("WSConnect - LoginSuccess - {$t9mtn['biz']}:{$t9mtn['bizId']}"); goto boZa_; lZ5HR: $qtbsi = isset($XWlC_['get']['token']) ? $XWlC_['get']['token'] : null; goto uw8hp; y_48P: foreach ($xpheI as $FWfay) { ServiceRepository::addServiceUser($FWfay, $t9mtn['id']); } goto tyxaO; boZa_: $_SESSION['user'] = $t9mtn; goto k0Tlg; tyxaO: if (!$BNvEa) { Amqp::send(ImMsgType::USER_ONLINE, array('userId' => $t9mtn['id'])); } goto JAzsH; bXeVk: foreach ($qRoWl as $AoMnT) { GroupRepository::addGroupUser($AoMnT, $t9mtn['id']); } goto vs2Wq; uw8hp: $t9mtn = UserAuthRepository::getUserByToken($qtbsi); goto qH9YV; vs2Wq: $xpheI = ServiceModel::listServiceIds($t9mtn['id']); goto y_48P; w5Nuw: if ($BNvEa) { } goto jtLjm; k0Tlg: $BNvEa = UserBinderRepository::isOnlineAll($t9mtn['id']); goto w5Nuw; jtLjm: UserBinderRepository::bind($U1CFU, $t9mtn['id']); goto OuP0i; zy2tD: LogRepository::log("WSConnect - {$U1CFU}"); goto lZ5HR; qH9YV: if (empty($t9mtn)) { goto MVA9S; Z_3ko: return; goto zAtpA; MVA9S: Gateway::sendToCurrentClient(ChatMsg::makeError('Login Error')->toJson()); goto nI_ci; nI_ci: Gateway::closeCurrentClient(); goto Z_3ko; zAtpA: } goto aHzeA; OuP0i: $qRoWl = GroupModel::listGroupIds($t9mtn['id']); goto bXeVk; JAzsH: } public static function onConnect($U1CFU) { LogRepository::log('OnConnect', $U1CFU); } public static function onMessage($U1CFU, $AF6tQ) { goto Gipae; kXPSU: LogRepository::log("OnMessage - {$t9mtn['biz']}:{$t9mtn['bizId']} - " . $miOiF->type(), $miOiF->toJson()); goto xFRAL; nHomE: if (empty($miOiF)) { return; } goto kXPSU; Gipae: if (empty($_SESSION['user'])) { LogRepository::log("OnMessage - {$U1CFU} - NoSession", $AF6tQ); return; } goto OU4Q2; OU4Q2: $t9mtn = $_SESSION['user']; goto Ht3w5; xFRAL: switch ($miOiF->type()) { case ImMsgType::PING: Gateway::sendToCurrentClient(ChatMsg::make(ImMsgType::PONG)->toJson()); return; case ImMsgType::INPUT: case ImMsgType::TALK: case ImMsgType::RECALL: case ImMsgType::UNREAD_CLEAR: goto zquhA; zXjgd: return; goto Ur2WD; zquhA: $miOiF->setContextUser($t9mtn); goto HAuzD; I2NRS: call_user_func_array(array(MessageHandler::class, $UR3Zf), array($U1CFU, $miOiF)); goto zXjgd; HAuzD: $UR3Zf = 'on' . ucfirst($miOiF->type()); goto I2NRS; Ur2WD: case ImMsgType::REQUEST: goto yxjf4; VnINB: $dvCKi = InputPackage::build($miOiF->getDataValue('data')); goto n25yy; VDD5L: foreach (RequestListenerProvider::all() as $yHanX) { if (in_array($mhShF, $yHanX->requests()) && $yHanX->permit($U1CFU, $miOiF)) { goto t6RXK; xnf0j: self::checkAndSendRequestResult($FZUh3, $U1CFU, $miOiF, $mhShF); goto VeR8d; VeR8d: $jgTPJ = true; goto zrykJ; t6RXK: $FZUh3 = call_user_func_array(array($yHanX, $UR3Zf), array($U1CFU, $miOiF, $dvCKi)); goto xnf0j; zrykJ: } } goto ku4Jb; d_vZ2: if (!$jgTPJ) { LogRepository::error("OnMessage - {$t9mtn['biz']}:{$t9mtn['bizId']} - UnhandledRequest - " . $UR3Zf, $AF6tQ); } goto DNLRr; ku4Jb: if (method_exists(RequestHandler::class, $UR3Zf)) { goto SpZ_x; SpZ_x: $FZUh3 = call_user_func_array(array(RequestHandler::class, $UR3Zf), array($U1CFU, $miOiF, $dvCKi)); goto zx2Oq; b7RRX: $jgTPJ = true; goto vGpUS; zx2Oq: self::checkAndSendRequestResult($FZUh3, $U1CFU, $miOiF, $mhShF); goto b7RRX; vGpUS: } goto d_vZ2; Tfc9d: $jgTPJ = false; goto VnINB; daJBB: $UR3Zf = 'on' . $mhShF; goto Tfc9d; yxjf4: $miOiF->setContextUser($t9mtn); goto GySCZ; n25yy: LogRepository::log("Request   - {$t9mtn['biz']}:{$t9mtn['bizId']} - {$mhShF}", $dvCKi->all()); goto VDD5L; y9LgB: if (!preg_match('/^[A-Za-z0-9]+$/', $mhShF)) { return; } goto daJBB; DNLRr: return; goto eUus6; GySCZ: $mhShF = $miOiF->getDataTrimString('type'); goto y9LgB; eUus6: default: LogRepository::error("OnMessage - {$t9mtn['biz']}:{$t9mtn['bizId']} - UnhandledMsg - " . $miOiF->type(), $AF6tQ); return; } goto VO0WQ; Ht3w5: $miOiF = ChatMsg::parse($AF6tQ); goto nHomE; VO0WQ: } private static function checkAndSendRequestResult($FZUh3, $U1CFU, $miOiF, $mhShF) { goto YwHFZ; qar0p: $bUaxg = ChatMsg::make(ImMsgType::REQUEST); goto rYq8t; YwHFZ: if (null === $FZUh3) { return; } goto dM288; LKHXK: GatewayUtil::send($U1CFU, $bUaxg); goto frG_r; dM288: $FZUh3['id'] = $miOiF->getDataTrimString('id'); goto zd5dO; zd5dO: $FZUh3['type'] = $mhShF; goto qar0p; rYq8t: $bUaxg->data($FZUh3); goto LKHXK; frG_r: } public static function onClose($U1CFU) { goto loz5Y; lkVVj: UserBinderRepository::unbindByClientId($U1CFU); goto jXE07; jXE07: if (!empty($_SESSION['user'])) { $BNvEa = UserBinderRepository::isOnlineAll($_SESSION['user']['id']); if (!$BNvEa) { Amqp::send(ImMsgType::USER_OFFLINE, array('userId' => $_SESSION['user']['id'])); } } goto yhGTh; loz5Y: LogRepository::log('OnClose  ', $U1CFU); goto lkVVj; yhGTh: } }