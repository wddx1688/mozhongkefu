<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Module\ImServer\Core\Repository; use Illuminate\Support\Facades\Redis; use ModStart\Core\Util\SerializeUtil; class RedisRepository { private static function getKey($Cc2wA) { goto FXTMr; jGM2b: if (null == $bCQ1H) { $bCQ1H = config('env.IM_SERVER_REDIS_PREFIX', 'IM:'); } goto Y3O1E; Y3O1E: return $bCQ1H . $Cc2wA; goto LCbN6; FXTMr: static $bCQ1H = null; goto jGM2b; LCbN6: } public static function client() { goto Icftf; LwUgp: if (null === $StcZM) { $StcZM = Redis::connection('imServer'); } goto SZeSf; SZeSf: return $StcZM; goto Ovt2y; Icftf: static $StcZM = null; goto LwUgp; Ovt2y: } public static function clientPoll() { goto OrjnI; c0e_P: return $StcZM; goto A7jSq; IS8VP: if (null === $StcZM) { $StcZM = Redis::connection('imServerPoll'); } goto c0e_P; OrjnI: static $StcZM = null; goto IS8VP; A7jSq: } public static function get($Cc2wA) { $qTz8C = self::client()->get(self::getKey($Cc2wA)); return $qTz8C; } public static function getObject($Cc2wA) { $qTz8C = self::client()->get(self::getKey($Cc2wA)); return @json_decode($qTz8C, true); } public static function getInteger($Cc2wA) { return intval(self::get($Cc2wA)); } public static function set($Cc2wA, $qTz8C) { self::client()->set(self::getKey($Cc2wA), $qTz8C); } public static function setnx($Cc2wA, $qTz8C) { return self::client()->setnx(self::getKey($Cc2wA), $qTz8C); } public static function setex($Cc2wA, $qTz8C, $sk1L8) { self::client()->setex(self::getKey($Cc2wA), $sk1L8, $qTz8C); } public static function setexObject($Cc2wA, $qTz8C, $sk1L8) { self::client()->setex(self::getKey($Cc2wA), $sk1L8, SerializeUtil::jsonEncode($qTz8C)); } public static function delete($Cc2wA) { self::client()->del(array(self::getKey($Cc2wA))); } public static function incr($Cc2wA) { self::client()->incr(self::getKey($Cc2wA)); } public static function decr($Cc2wA) { return self::client()->decr(self::getKey($Cc2wA)); } public static function expire($Cc2wA, $iOLw_) { self::client()->expire(self::getKey($Cc2wA), $iOLw_); } public static function hget($Cc2wA, $E9h4W) { return self::client()->hget(self::getKey($Cc2wA), $E9h4W); } public static function hincrby($Cc2wA, $E9h4W, $DZJvi = 1) { self::client()->hincrby(self::getKey($Cc2wA), $E9h4W, $DZJvi); } public static function hgetall($Cc2wA) { return self::client()->hgetall(self::getKey($Cc2wA)); } public static function hset($Cc2wA, $rfBQu, $qTz8C) { self::client()->hset(self::getKey($Cc2wA), $rfBQu, $qTz8C); } public static function hdel($Cc2wA, $rfBQu) { self::client()->hdel(self::getKey($Cc2wA), array($rfBQu)); } public static function sadd($Cc2wA, $Z3Fxc) { self::client()->sadd(self::getKey($Cc2wA), $Z3Fxc); } public static function smembers($Cc2wA) { return self::client()->smembers(self::getKey($Cc2wA)); } public static function srem($Cc2wA, $eYNTb) { self::client()->srem(self::getKey($Cc2wA), $eYNTb); } public static function scard($Cc2wA) { return self::client()->scard(self::getKey($Cc2wA)); } }