<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Module\ImServer\Core\Repository; use ModStart\Core\Dao\ModelUtil; use Module\ImServer\Constant\ImRedisConstant; use Module\ImServer\Core\Model\UserModel; class UserBinderRepository { public static function bind($U1CFU, $qzstR, $F5XX1 = IM_SERVER_ID) { RedisRepository::hset(sprintf(ImRedisConstant::SERVER_CLIENT_USER_MAP, $F5XX1), $U1CFU, $qzstR); RedisRepository::sadd(sprintf(ImRedisConstant::SERVER_USER_CLIENT_SET, $F5XX1, $qzstR), array($U1CFU)); } public static function unbindByClientId($U1CFU, $F5XX1 = IM_SERVER_ID) { goto uKvsv; uKvsv: $qzstR = self::getClientUserId($U1CFU, $F5XX1); goto yBVga; yBVga: RedisRepository::hdel(sprintf(ImRedisConstant::SERVER_CLIENT_USER_MAP, $F5XX1), $U1CFU); goto fm8Ie; fm8Ie: if ($qzstR) { RedisRepository::srem(sprintf(ImRedisConstant::SERVER_USER_CLIENT_SET, $F5XX1, $qzstR), $U1CFU); } goto oh0B2; oh0B2: } public static function getClientUserId($U1CFU, $F5XX1 = IM_SERVER_ID) { return RedisRepository::hget(sprintf(ImRedisConstant::SERVER_CLIENT_USER_MAP, $F5XX1), $U1CFU); } public static function listUserClients($qzstR, $F5XX1 = IM_SERVER_ID) { goto dWNjV; YIg3x: if (empty($COuxF)) { $COuxF = array(); } goto KUBV3; KUBV3: return $COuxF; goto Xdu1s; dWNjV: $COuxF = RedisRepository::smembers(sprintf(ImRedisConstant::SERVER_USER_CLIENT_SET, $F5XX1, $qzstR)); goto YIg3x; Xdu1s: } public static function listAllUserClients($swc4I, $F5XX1 = IM_SERVER_ID) { goto I7Nos; MCY45: return $COuxF; goto QLyTm; I7Nos: $COuxF = array(); goto YJfDu; YJfDu: foreach ($swc4I as $qzstR) { $COuxF = array_merge($COuxF, UserBinderRepository::listUserClients($qzstR, $F5XX1)); } goto MCY45; QLyTm: } public static function listAllBizUserClients($UegGl, $rlYPX, $F5XX1 = IM_SERVER_ID) { goto yHFp9; unOOV: foreach ($swc4I as $qzstR) { $COuxF = array_merge($COuxF, UserBinderRepository::listUserClients($qzstR, $F5XX1)); } goto s8dQ5; yHFp9: $swc4I = UserModel::listBizUserIds($UegGl, $rlYPX); goto iMSKA; s8dQ5: return $COuxF; goto ZWEfr; iMSKA: $COuxF = array(); goto unOOV; ZWEfr: } public static function isOnline($qzstR, $F5XX1 = IM_SERVER_ID) { return RedisRepository::scard(sprintf(ImRedisConstant::SERVER_USER_CLIENT_SET, $F5XX1, $qzstR)) > 0; } public static function isOnlineAll($qzstR, $RMpGQ = null) { goto sLP0A; vXHSR: return false; goto nftkK; rdfIq: foreach ($RMpGQ as $F5XX1 => $iXoTU) { if (self::isOnline($qzstR, $F5XX1)) { return true; } } goto vXHSR; sLP0A: if (empty($RMpGQ)) { $RMpGQ = ServerRepository::getServerRunIdAll('running'); } goto rdfIq; nftkK: } }