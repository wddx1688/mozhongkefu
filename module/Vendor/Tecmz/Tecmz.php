<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Module\Vendor\Tecmz; use Illuminate\Support\Facades\Log; use ModStart\Core\Input\Response; use ModStart\Core\Util\CurlUtil; use ModStart\Core\Util\SerializeUtil; use ModStart\Core\Util\SignUtil; class Tecmz { public static $API_BASE = 'https://api.tecmz.com/open_api'; private $appId; private $appSecret; private $debug = false; public function __construct($mNUdr, $aUCMc = null) { goto pjXUv; kkwcU: $this->appSecret = $aUCMc; goto tQfJg; tQfJg: $EB3qk = modstart_config('Tecmz_ApiBase', ''); goto UnVul; pjXUv: $this->appId = $mNUdr; goto kkwcU; UnVul: if ($EB3qk) { self::$API_BASE = $EB3qk; } goto H1gQa; H1gQa: } public function signCheck($uZEpM) { goto Sbqgi; Sbqgi: if (empty($uZEpM['sign']) || empty($uZEpM['timestamp']) || empty($uZEpM['app_id'])) { return false; } goto uttBW; gGYZA: $B3XXm = $uZEpM['sign']; goto W43_F; upL0y: if ($uZEpM['timestamp'] < time() - 1800 || $uZEpM['timestamp'] > time() + 1800) { return false; } goto gGYZA; uttBW: if ($uZEpM['app_id'] != $this->appId) { return false; } goto upL0y; NJQkH: return true; goto GljHS; XJ8wQ: $N3mYq = SignUtil::common($uZEpM, $this->appSecret); goto NxW4u; NxW4u: if ($B3XXm != $N3mYq) { return false; } goto NJQkH; W43_F: unset($uZEpM['sign']); goto XJ8wQ; GljHS: } public static function instance($mNUdr, $aUCMc = null) { goto HR6A6; YaVko: return $VQao2[$mNUdr]; goto ucyMW; U7NYl: if (!isset($VQao2[$mNUdr])) { $VQao2[$mNUdr] = new self($mNUdr, $aUCMc); } goto YaVko; HR6A6: static $VQao2 = array(); goto U7NYl; ucyMW: } public function setDebug($PgaoQ) { $this->debug = $PgaoQ; } private function request($R9ZmV, $uZEpM = array()) { goto K_6q6; U8fKH: return CurlUtil::postJSONBody($VwfRl, $uZEpM, array('timeout' => 60 * 10, 'userAgentAppend' => 'TecmzApi')); goto O9agv; xelAU: if ($this->appSecret) { $uZEpM['timestamp'] = time(); $uZEpM['sign'] = SignUtil::common($uZEpM, $this->appSecret); } goto BKx70; BKx70: $VwfRl = self::$API_BASE . $R9ZmV; goto m6Z01; m6Z01: if ($this->debug) { Log::debug('TecmzApi -> ' . $VwfRl . ' -> ' . SerializeUtil::jsonEncode($uZEpM, JSON_UNESCAPED_UNICODE)); } goto U8fKH; K_6q6: $uZEpM['app_id'] = $this->appId; goto xelAU; O9agv: } public function ping() { goto CwF9M; DuBHd: return Response::generate(0, 'ok'); goto goNqX; CwF9M: $FZUh3 = $this->request('/ping'); goto Yhb9v; Yhb9v: if ($FZUh3['code']) { return Response::generate(-1, 'PING失败'); } goto DuBHd; goNqX: } public function payOfflineCreate($C2RFg, $ECp_x, $JDu0F, $pu0uZ) { return $this->request('/pay_offline/create', array('biz_sn' => $C2RFg, 'money' => $ECp_x, 'notify_url' => $JDu0F, 'return_url' => $pu0uZ)); } public function captchaVerify($yA25I, $Cc2wA, $XWlC_, $INfmA, $YZXT9) { return $this->request('/captcha/verify', array('action' => $yA25I, 'key' => $Cc2wA, 'data' => $XWlC_, 'runtime' => $INfmA, 'types' => $YZXT9)); } public function captchaValidate($Cc2wA) { return $this->request('/captcha/validate', array('key' => $Cc2wA)); } public function smsSend($jU6y9, $LBX9_, $dAwYz = array()) { goto OC6zs; tCNRI: return $this->request('/sms/send', array_merge(array('phone' => $jU6y9, 'template_id' => $LBX9_), $R7CoI)); goto wRMYy; OC6zs: $R7CoI = array(); goto OmyeE; OmyeE: foreach ($dAwYz as $U8G_W => $gghxW) { $R7CoI["param_{$U8G_W}"] = $gghxW; } goto tCNRI; wRMYy: } public function asr($mhShF, $H2xmH) { goto Fm7f1; zpi86: $R7CoI['content'] = $H2xmH; goto srNHl; srNHl: return $this->request('/asr', $R7CoI); goto mOnhN; Fm7f1: $R7CoI = array(); goto UN6P9; UN6P9: $R7CoI['type'] = $mhShF; goto zpi86; mOnhN: } public function express($mhShF, $D8Bjy, $jU6y9 = null) { goto ru114; WGME5: $R7CoI['phone'] = $jU6y9; goto xOT2D; xUlOL: $R7CoI['type'] = $mhShF; goto DuIz4; xOT2D: return $this->request('/express', $R7CoI); goto C0sX7; DuIz4: $R7CoI['no'] = $D8Bjy; goto WGME5; ru114: $R7CoI = array(); goto xUlOL; C0sX7: } public function censorImage($qtKFy, $Bl07o) { goto tMFXL; yw3Wo: return $this->request('/censor_image', $R7CoI); goto XAPvq; tMFXL: $R7CoI = array(); goto vpXM6; vpXM6: $R7CoI['imageBase64'] = $qtKFy; goto RfHLW; RfHLW: $R7CoI['imageUrl'] = $Bl07o; goto yw3Wo; XAPvq: } public function censorText($me7IX) { goto X_XED; JiIb6: return $this->request('/censor_text', $R7CoI); goto D7_XL; t0jGs: $R7CoI['text'] = $me7IX; goto JiIb6; X_XED: $R7CoI = array(); goto t0jGs; D7_XL: } public function ipToLocation($Vzm8o) { goto ELNah; IaPuD: $R7CoI['ip'] = $Vzm8o; goto ZmdZl; ELNah: $R7CoI = array(); goto IaPuD; ZmdZl: return $this->request('/ip_to_location', $R7CoI); goto JHG8P; JHG8P: } public function docToImage($sVWSm, $ke2RZ = 0) { goto dpF6y; Tiog3: return $this->request('/doc_to_image', $R7CoI); goto Pg_aF; dpF6y: $R7CoI = array(); goto bM3ob; aEX9r: $R7CoI['pageLimit'] = $ke2RZ; goto Tiog3; bM3ob: $R7CoI['docPath'] = $sVWSm; goto aEX9r; Pg_aF: } public function docToImageQueue($sVWSm, $ke2RZ = 0, $OVwc7 = '', $uZEpM = array()) { goto GG09V; GG09V: $R7CoI = array(); goto H1LLj; H1LLj: $R7CoI['docPath'] = $sVWSm; goto HhexF; HhexF: $R7CoI['pageLimit'] = $ke2RZ; goto ajMUY; ajMUY: $R7CoI['imageQuality'] = $OVwc7; goto yk7zc; yk7zc: return $this->request('/doc_to_image/queue', array_merge($R7CoI, $uZEpM)); goto V3C5m; V3C5m: } public function docToImageQuery($rRwCn) { goto sQTV6; sVM9Y: return $this->request('/doc_to_image/query', $R7CoI); goto BcQtl; sQTV6: $R7CoI = array(); goto Q2Qke; Q2Qke: $R7CoI['jobId'] = $rRwCn; goto sVM9Y; BcQtl: } public function imageCompress($w_0sB, $Jgmfp = null, $Bl07o = null, $rfBQu = null, $uZEpM = array()) { goto TfgRi; GUhBc: if (Response::isError($FZUh3)) { return $FZUh3; } goto Q6dTt; xkRb5: $R7CoI['name'] = $rfBQu; goto d7zb9; d7zb9: $R7CoI['param'] = SerializeUtil::jsonEncode($uZEpM, JSON_UNESCAPED_UNICODE); goto N2A8c; Pub8C: if (!empty($Jgmfp)) { $R7CoI['imageData'] = base64_encode($Jgmfp); } goto AFv6H; N2A8c: $RGuJP = $FZUh3['data']['server']; goto kfcgC; Q6dTt: $R7CoI = array(); goto TKLj_; TfgRi: $FZUh3 = $this->request('/image_compress/prepare', array()); goto GUhBc; TKLj_: $R7CoI['format'] = $w_0sB; goto Pub8C; W6vn3: if (Response::isError($FZUh3)) { return $FZUh3; } goto NnGDv; kfcgC: $FZUh3 = CurlUtil::postJSONBody($RGuJP, $R7CoI); goto W6vn3; AFv6H: if (!empty($Bl07o)) { $R7CoI['imageUrl'] = $Bl07o; } goto xkRb5; NnGDv: return Response::generate(0, 'ok', array('imageOriginalSize' => $FZUh3['data']['originalSize'], 'imageCompressSize' => $FZUh3['data']['compressSize'], 'imageUrl' => $FZUh3['data']['url'], 'server' => $RGuJP)); goto MdFCj; MdFCj: } public function randomAvatar() { goto TwrBS; e2mMv: if ('png' == $FZUh3['data']['format']) { $Jgmfp = @base64_decode($FZUh3['data']['imageData']); } else { goto sh3lG; aZs9G: $R7CoI['format'] = $FZUh3['data']['format']; goto zf6Uy; vyLja: $FZUh3 = CurlUtil::postJSONBody($RGuJP, $R7CoI); goto EuoD0; zf6Uy: $R7CoI['imageData'] = $FZUh3['data']['imageData']; goto OyWGt; a9HGi: $RGuJP = $FZUh3['data']['server']; goto vyLja; UCJEk: $Jgmfp = CurlUtil::getRaw($FZUh3['data']['url']); goto nb1J2; sh3lG: $R7CoI = array(); goto aZs9G; OyWGt: $R7CoI['toFormat'] = 'png'; goto a9HGi; EuoD0: if (Response::isError($FZUh3)) { return $FZUh3; } goto UCJEk; nb1J2: } goto wHzh5; gLFkW: return Response::generate(0, 'ok', array('size' => strlen($Jgmfp), 'imageData' => $Jgmfp)); goto risLV; TwrBS: $FZUh3 = $this->request('/random_avatar/prepare', array()); goto iI6zz; iI6zz: if (Response::isError($FZUh3)) { return $FZUh3; } goto e2mMv; wHzh5: if (empty($Jgmfp)) { return Response::generateError('图片数据为空'); } goto gLFkW; risLV: } public function ocr($w_0sB, $Jgmfp, $Bl07o = null) { goto pn7o0; AC3mp: if (!empty($Jgmfp)) { $R7CoI['imageData'] = base64_encode($Jgmfp); } goto nUJxV; SzLh9: $R7CoI['format'] = $w_0sB; goto AC3mp; pn7o0: $R7CoI = array(); goto SzLh9; nUJxV: $R7CoI['imageUrl'] = $Bl07o; goto pR6nm; pR6nm: return $this->request('/ocr', $R7CoI); goto YzxzS; YzxzS: } public function addressParse($n3GvS) { goto Skjbo; boV6e: return $this->request('/address_parse', $R7CoI); goto cYIL8; Skjbo: $R7CoI = array(); goto Ewobi; Ewobi: $R7CoI['content'] = $n3GvS; goto boV6e; cYIL8: } public function personVerifyIdCard($rfBQu, $W_3E0) { goto xXaCE; sNv9W: $R7CoI['name'] = $rfBQu; goto xtM4d; X4W9S: return $this->request('/person_verify_id_card', $R7CoI); goto J1vh9; xtM4d: $R7CoI['idCardNumber'] = $W_3E0; goto X4W9S; xXaCE: $R7CoI = array(); goto sNv9W; J1vh9: } private function callFileConvertQueue($mhShF, $VwfRl, $rfBQu = null, $uZEpM = array()) { goto QEBxo; QcIHV: $R7CoI = array(); goto UtUg5; ARKb5: $R7CoI['name'] = $rfBQu; goto GpJTQ; QEBxo: if (is_array($VwfRl)) { $VwfRl = SerializeUtil::jsonEncode($VwfRl, JSON_UNESCAPED_UNICODE); } goto QcIHV; SwgZK: return $this->request('/' . $mhShF . '/queue', $R7CoI); goto K77yM; UtUg5: $R7CoI['url'] = $VwfRl; goto ARKb5; GpJTQ: $R7CoI['param'] = SerializeUtil::jsonEncode($uZEpM, JSON_UNESCAPED_UNICODE); goto SwgZK; K77yM: } private function callFileConvertQuery($mhShF, $rRwCn) { goto SHVAq; CStqK: return $this->request('/' . $mhShF . '/query', $R7CoI); goto j0K5W; iSTBh: $R7CoI['jobId'] = $rRwCn; goto CStqK; SHVAq: $R7CoI = array(); goto iSTBh; j0K5W: } public function aiToImageQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('ai_to_image', $VwfRl, $rfBQu, $uZEpM); } public function aiToImageQuery($rRwCn) { return $this->callFileConvertQuery('ai_to_image', $rRwCn); } public function amrConvertQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('amr_convert', $VwfRl, $rfBQu, $uZEpM); } public function amrConvertQuery($rRwCn) { return $this->callFileConvertQuery('amr_convert', $rRwCn); } public function docToPdfQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('doc_to_pdf', $VwfRl, $rfBQu, $uZEpM); } public function docToPdfQuery($rRwCn) { return $this->callFileConvertQuery('doc_to_pdf', $rRwCn); } public function epsToImageQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('eps_to_image', $VwfRl, $rfBQu, $uZEpM); } public function epsToImageQuery($rRwCn) { return $this->callFileConvertQuery('eps_to_image', $rRwCn); } public function mp3ConvertQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('mp3_convert', $VwfRl, $rfBQu, $uZEpM); } public function mp3ConvertQuery($rRwCn) { return $this->callFileConvertQuery('mp3_convert', $rRwCn); } public function wavConvertQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('wav_convert', $VwfRl, $rfBQu, $uZEpM); } public function wavConvertQuery($rRwCn) { return $this->callFileConvertQuery('wav_convert', $rRwCn); } public function pdfCollectQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('pdf_collect', $VwfRl, $rfBQu, $uZEpM); } public function pdfCollectQuery($rRwCn) { return $this->callFileConvertQuery('pdf_collect', $rRwCn); } public function pdfDecryptQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('pdf_decrypt', $VwfRl, $rfBQu, $uZEpM); } public function pdfDecryptQuery($rRwCn) { return $this->callFileConvertQuery('pdf_decrypt', $rRwCn); } public function pdfEncryptQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('pdf_encrypt', $VwfRl, $rfBQu, $uZEpM); } public function pdfEncryptQuery($rRwCn) { return $this->callFileConvertQuery('pdf_encrypt', $rRwCn); } public function pdfOptimizeQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('pdf_optimize', $VwfRl, $rfBQu, $uZEpM); } public function pdfOptimizeQuery($rRwCn) { return $this->callFileConvertQuery('pdf_optimize', $rRwCn); } public function pdfToImageQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('pdf_to_image', $VwfRl, $rfBQu, $uZEpM); } public function pdfToImageQuery($rRwCn) { return $this->callFileConvertQuery('pdf_to_image', $rRwCn); } public function pdfWatermarkQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('pdf_watermark', $VwfRl, $rfBQu, $uZEpM); } public function pdfWatermarkQuery($rRwCn) { return $this->callFileConvertQuery('pdf_watermark', $rRwCn); } public function psdToImageQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('psd_to_image', $VwfRl, $rfBQu, $uZEpM); } public function psdToImageQuery($rRwCn) { return $this->callFileConvertQuery('psd_to_image', $rRwCn); } public function pdfToWordQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('pdf_to_word', $VwfRl, $rfBQu, $uZEpM); } public function pdfToWordQuery($rRwCn) { return $this->callFileConvertQuery('pdf_to_word', $rRwCn); } public function pdfToExcelQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('pdf_to_excel', $VwfRl, $rfBQu, $uZEpM); } public function pdfToExcelQuery($rRwCn) { return $this->callFileConvertQuery('pdf_to_excel', $rRwCn); } public function imageToWordQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('image_to_word', $VwfRl, $rfBQu, $uZEpM); } public function imageToWordQuery($rRwCn) { return $this->callFileConvertQuery('image_to_word', $rRwCn); } public function imageToExcelQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('image_to_excel', $VwfRl, $rfBQu, $uZEpM); } public function imageToExcelQuery($rRwCn) { return $this->callFileConvertQuery('image_to_excel', $rRwCn); } public function imageThumbQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('image_thumb', $VwfRl, $rfBQu, $uZEpM); } public function imageThumbQuery($rRwCn) { return $this->callFileConvertQuery('image_thumb', $rRwCn); } public function docToHtmlQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('doc_to_html', $VwfRl, $rfBQu, $uZEpM); } public function docToHtmlQuery($rRwCn) { return $this->callFileConvertQuery('doc_to_html', $rRwCn); } public function pdfToTextQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('pdf_to_text', $VwfRl, $rfBQu, $uZEpM); } public function pdfToTextQuery($rRwCn) { return $this->callFileConvertQuery('pdf_to_text', $rRwCn); } public function docSmartPreviewQueue($VwfRl, $rfBQu = null, $uZEpM = array()) { return $this->callFileConvertQueue('doc_smart_preview', $VwfRl, $rfBQu, $uZEpM); } public function docSmartPreviewQuery($rRwCn) { return $this->callFileConvertQuery('doc_smart_preview', $rRwCn); } }