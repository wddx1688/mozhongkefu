<?php
/**
 * ------------------------ 
 *  版权所有  www.tecmz.com
 *  商业版本请购买正版授权使用
 * ------------------------
*/ namespace Module\Member\Api\Controller; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Session; use Illuminate\Support\Str; use ModStart\Core\Exception\BizException; use ModStart\Core\Input\InputPackage; use ModStart\Core\Input\Request; use ModStart\Core\Input\Response; use ModStart\Core\Util\CurlUtil; use ModStart\Core\Util\EventUtil; use ModStart\Core\Util\StrUtil; use ModStart\Misc\Captcha\CaptchaFacade; use ModStart\Module\ModuleBaseController; use Module\Member\Auth\MemberUser; use Module\Member\Config\MemberOauth; use Module\Member\Events\MemberUserLoginedEvent; use Module\Member\Events\MemberUserLogoutEvent; use Module\Member\Events\MemberUserPasswordResetedEvent; use Module\Member\Events\MemberUserRegisteredEvent; use Module\Member\Oauth\AbstractOauth; use Module\Member\Provider\RegisterProcessor\AbstractMemberRegisterProcessorProvider; use Module\Member\Provider\RegisterProcessor\MemberRegisterProcessorProvider; use Module\Member\Type\MemberOauthCallbackMode; use Module\Member\Util\MemberUtil; use Module\Member\Util\SecurityUtil; use Module\MemberOauth\Core\MemberOauthConstant; use Module\MemberOauth\Oauth\WechatMiniProgramOauth; use Module\MemberOauth\Oauth\WechatMobileOauth; use Module\MemberOauth\Oauth\WechatOauth; use Module\Vendor\Job\MailSendJob; use Module\Vendor\Job\SmsSendJob; use Module\Vendor\Support\ResponseCodes; use Module\Vendor\Util\SessionUtil; class AuthController extends ModuleBaseController { public function checkRedirectSafety($mDpIY) { goto LV6tn; rFTGi: $mRXsR = modstart_config('Member_LoginRedirectWhiteList', ''); goto Ldxrr; L1LM1: if (empty($hEapL['host'])) { return; } goto bT_eV; XwMux: $hEapL = parse_url($mDpIY); goto L1LM1; Uz5Br: $mRXsR = array_filter($mRXsR); goto ZB_um; m1F2D: BizException::throws('登录跳转路径异常'); goto AJWDY; LV6tn: if (!modstart_config('Member_LoginRedirectCheckEnable', false)) { return; } goto XwMux; bT_eV: if ($hEapL['host'] == Request::domain()) { return; } goto rFTGi; ZB_um: foreach ($mRXsR as $AVLNU) { if ($hEapL['host'] == $AVLNU) { return; } } goto m1F2D; Ldxrr: $mRXsR = explode('
', $mRXsR); goto Uz5Br; AJWDY: } public function oauthTryLogin($rDRQ3 = null) { goto oLiqB; orxjZ: if ($FZUh3['data']['memberUserId'] > 0) { goto ylS8l; dLp1Q: MemberUtil::fireLogin($FZUh3['data']['memberUserId']); goto CYbbs; kSzfn: return Response::generateSuccessData($tldyc); goto Ye7gA; ylS8l: Session::put('memberUserId', $FZUh3['data']['memberUserId']); goto dLp1Q; CYbbs: Session::forget('oauthUserInfo'); goto DZygl; DZygl: $tldyc['memberUserId'] = $FZUh3['data']['memberUserId']; goto kSzfn; Ye7gA: } goto fgUlm; Z42T9: BizException::throwsIfEmpty('授权类型为空', $rDRQ3); goto yFmAP; rVl4M: if (empty($sxGVm)) { return Response::generate(-1, '用户授权数据为空'); } goto O6lhu; yFmAP: $TZ7L5 = MemberOauth::getOrFail($rDRQ3); goto t16t_; oLiqB: $sxGVm = Session::get('oauthUserInfo', array()); goto rVl4M; n3DrL: $tldyc = array('memberUserId' => 0); goto orxjZ; fgUlm: if (modstart_config('Member_OauthBindAuto', false)) { goto Dwgb0; ZphQX: Session::put('memberUserId', $tJ6XI); goto XiPzb; XiPzb: MemberUtil::fireLogin($tJ6XI); goto TpzFn; TpzFn: Session::forget('oauthUserInfo'); goto TLL1d; jzI3L: if (!empty($sxGVm['username'])) { $c_Qdc = $sxGVm['username']; } goto E23Um; fxUI_: EventUtil::fire(new MemberUserRegisteredEvent($tJ6XI)); goto ZphQX; teL1T: $tJ6XI = $FZUh3['data']['id']; goto l_KCN; E23Um: $FZUh3 = MemberUtil::registerUsernameQuick($c_Qdc); goto b06rH; M1VBg: BizException::throwsIfResponseError($FZUh3); goto CQ8Rh; b06rH: if ($FZUh3['code']) { return Response::generateError($FZUh3['msg']); } goto teL1T; QW0in: $Bj5vh['registerIp'] = StrUtil::mbLimit(Request::ip(), 20); goto R0Qer; iVjW4: $FZUh3 = $TZ7L5->processBindToUser(array('memberUserId' => $tJ6XI, 'userInfo' => $sxGVm)); goto M1VBg; l_KCN: $Bj5vh = array(); goto QW0in; yfPtk: return Response::generateSuccessData($tldyc); goto uf0pu; CQ8Rh: if (!empty($sxGVm['avatar'])) { $xgKTZ = CurlUtil::getRaw($sxGVm['avatar'], array(), array('returnRaw' => true)); if (200 == $xgKTZ['httpCode']) { MemberUtil::setAvatar($tJ6XI, $xgKTZ['body'], $xgKTZ['ext']); } } goto fxUI_; R0Qer: if (!empty($Bj5vh)) { MemberUtil::update($tJ6XI, $Bj5vh); } goto iVjW4; TLL1d: $tldyc['memberUserId'] = $tJ6XI; goto yfPtk; Dwgb0: $c_Qdc = null; goto jzI3L; uf0pu: } goto EslsB; O6lhu: if (empty($rDRQ3)) { $ErQts = InputPackage::buildFromInput(); $rDRQ3 = $ErQts->getTrimString('type'); } goto Z42T9; EslsB: return Response::generateSuccessData($tldyc); goto HP3ea; t16t_: $FZUh3 = $TZ7L5->processTryLogin(array('userInfo' => $sxGVm)); goto yKCLH; yKCLH: BizException::throwsIfResponseError($FZUh3); goto n3DrL; HP3ea: } public function oauthBind($rDRQ3 = null) { goto KvDjy; Bh4J3: if (modstart_config()->getWithEnv('registerDisable', false) && !modstart_config()->getWithEnv('registerOauthEnable', false)) { return Response::generate(-1, '用户注册已禁用'); } goto SBUx6; vU8_k: EventUtil::fire(new MemberUserRegisteredEvent($tJ6XI)); goto ihOSV; pBae7: $FZUh3 = MemberUtil::register($c_Qdc, $jU6y9, $PcW1B, null, true); goto Vt2Fq; eXlOr: $PcW1B = $ErQts->getEmail('email'); goto W2JIu; z2UNS: if (!Session::get('oauthBindCaptchaPass', false)) { if (!CaptchaFacade::check($iXslQ)) { SessionUtil::atomicProduce('oauthBindCaptchaPassCount', 1); return Response::generate(-1, '请重新进行安全验证'); } } goto SBqaY; LeovH: $mDpIY = $ErQts->getTrimString('redirect', modstart_web_url('member')); goto Lx3UI; M7CM_: $iXslQ = $ErQts->getTrimString('captcha'); goto z2UNS; RRAYT: if (modstart_config('Member_OauthBindEmailEnable')) { $Bj5vh['emailVerified'] = true; } goto CRgX4; Vt2Fq: if ($FZUh3['code']) { return Response::generate(-1, $FZUh3['msg']); } goto pwl7e; pwl7e: $tJ6XI = $FZUh3['data']['id']; goto fxAVm; D2DTm: if (empty($sxGVm)) { return Response::generate(-1, '用户授权数据为空'); } goto YzPiY; KNOOL: if (!empty($Bj5vh)) { MemberUtil::update($tJ6XI, $Bj5vh); } goto hDcrn; W2JIu: $fgXQD = $ErQts->getTrimString('emailVerify'); goto M7CM_; Lx3UI: $rDRQ3 = $ErQts->getTrimString('type', $rDRQ3); goto f_4v7; k02O0: return Response::generate(0, null); goto DBvOV; ozRXU: if (Str::contains($c_Qdc, '@')) { return Response::generate(-1, '用户名不能包含特殊字符'); } goto VtvYN; TLRlr: $FZUh3 = $TZ7L5->processTryLogin(array('userInfo' => $sxGVm)); goto wDrrk; CQsbK: Session::forget('oauthUserInfo'); goto k02O0; SBqaY: if (!SessionUtil::atomicConsume('oauthBindCaptchaPassCount')) { return Response::generate(-1, '请进行安全验证'); } goto AbIiF; hDcrn: $FZUh3 = $TZ7L5->processBindToUser(array('memberUserId' => $tJ6XI, 'userInfo' => $sxGVm)); goto iuDe1; Wz3Y6: $jU6y9 = $ErQts->getPhone('phone'); goto XZWnI; SBUx6: $c_Qdc = $ErQts->getTrimString('username'); goto ozRXU; f_4v7: $sxGVm = Session::get('oauthUserInfo', array()); goto D2DTm; YzPiY: $TZ7L5 = MemberOauth::getOrFail($rDRQ3); goto qwK1e; U9FW1: MemberUtil::fireLogin($tJ6XI); goto CQsbK; KvDjy: $ErQts = InputPackage::buildFromInput(); goto LeovH; VtvYN: if (preg_match('/^\\d{11}$/', $c_Qdc)) { return Response::generate(-1, '用户名不能为纯数字'); } goto Wz3Y6; ihOSV: Session::put('memberUserId', $tJ6XI); goto U9FW1; z_LLp: if (modstart_config('Member_OauthBindEmailEnable')) { goto ES1CD; lIYXQ: if ($PcW1B != Session::get('oauthBindEmail')) { return Response::generate(-1, '两次邮箱不一致'); } goto gV0Vw; RiteB: if (Session::get('oauthBindEmailVerifyTime') + 60 * 60 < time()) { return Response::generate(-1, '邮箱验证码已过期'); } goto lIYXQ; ChLtM: $pyCdV = Session::get('oauthBindEmailVerify'); goto q8f0z; q8f0z: if ($fgXQD != $pyCdV) { Log::info('Member.OauthBind.EmailVerifyError - ' . $fgXQD . ' - ' . $pyCdV); return Response::generate(-1, '邮箱验证码不正确.'); } goto RiteB; ES1CD: if (empty($PcW1B)) { return Response::generate(-1, '请输入邮箱'); } goto ChLtM; gV0Vw: } goto pBae7; h8YiF: if (modstart_config('Member_OauthBindPhoneEnable')) { $Bj5vh['phoneVerified'] = true; } goto RRAYT; wDrrk: BizException::throwsIfResponseError($FZUh3); goto qQSFx; AbIiF: if (modstart_config('Member_OauthBindPhoneEnable')) { goto G4JT0; kPSLP: $vIFxt = Session::get('oauthBindPhoneVerify'); goto GFgJA; M9Jmr: if (Session::get('oauthBindPhoneVerifyTime') + 60 * 60 < time()) { return Response::generate(-1, '手机验证码已过期'); } goto GGQIt; G4JT0: if (empty($jU6y9)) { return Response::generate(-1, '请输入手机'); } goto kPSLP; GGQIt: if ($jU6y9 != Session::get('oauthBindPhone')) { return Response::generate(-1, '两次手机不一致'); } goto JxIug; GFgJA: if ($z8YvX != $vIFxt) { Log::info('Member.OauthBind.PhoneVerifyError - ' . $z8YvX . ' - ' . $vIFxt); return Response::generate(-1, '手机验证码不正确.'); } goto M9Jmr; JxIug: } goto z_LLp; E_syF: if (!empty($sxGVm['avatar'])) { $xgKTZ = CurlUtil::getRaw($sxGVm['avatar'], array(), array('returnRaw' => true)); if (200 == $xgKTZ['httpCode']) { MemberUtil::setAvatar($tJ6XI, $xgKTZ['body'], $xgKTZ['ext']); } } goto vU8_k; iuDe1: BizException::throwsIfResponseError($FZUh3); goto E_syF; XZWnI: $z8YvX = $ErQts->getTrimString('phoneVerify'); goto eXlOr; fxAVm: $Bj5vh = array(); goto h8YiF; rY4MY: if ($EFMVQ > 0) { goto Kpclf; xeZ9z: BizException::throwsIfResponseError($FZUh3); goto Yw_wl; Kpclf: $FZUh3 = $TZ7L5->processBindToUser(array('memberUserId' => $EFMVQ, 'userInfo' => $sxGVm)); goto xeZ9z; BXDQo: return Response::generate(0, null, null, $mDpIY); goto sOSld; Yw_wl: Session::forget('oauthUserInfo'); goto BXDQo; sOSld: } goto TLRlr; qwK1e: $EFMVQ = Session::get('memberUserId', 0); goto rY4MY; qQSFx: if ($FZUh3['data']['memberUserId'] > 0) { goto WfU5W; b3wO1: MemberUtil::fireLogin($FZUh3['data']['memberUserId']); goto dKQro; kyzvH: return Response::generateSuccessData(array('memberUserId' => $FZUh3['data']['memberUserId'])); goto fe44Z; dKQro: Session::forget('oauthUserInfo'); goto kyzvH; WfU5W: Session::put('memberUserId', $FZUh3['data']['memberUserId']); goto b3wO1; fe44Z: } goto Bh4J3; CRgX4: $Bj5vh['registerIp'] = StrUtil::mbLimit(Request::ip(), 20); goto KNOOL; DBvOV: } public function oauthCallback($rDRQ3 = null, $oZLCv = null) { goto k510R; O4f2U: if (empty($rDRQ3)) { $rDRQ3 = $ErQts->getTrimString('type'); } goto Qcj3r; n9VQA: $fKl3n = $ErQts->getTrimString('code'); goto SAAST; eepiw: $zMdND = $ErQts->getType('callbackMode', MemberOauthCallbackMode::class); goto TNY9X; D9PMt: $uZEpM = Session::get('oauthLoginParam', array()); goto Je_ee; SAAST: if (empty($fKl3n)) { $fKl3n = $ErQts->getTrimString('auth_code'); } goto ysRkr; q8Ulm: return Response::generate(0, 'ok', array('user' => $cPWai)); goto RrQWo; OoNbM: $tURZC = $ErQts->getBoolean('view', false); goto lRAJ3; Je_ee: Session::forget('oauthLoginParam'); goto dfNoh; vJ4Wx: if (0 != $FZUh3['code']) { return $FZUh3; } goto KpPgc; TNY9X: if ($zMdND) { switch ($zMdND) { case MemberOauthCallbackMode::View: Session::put('oauthViewOpenId_' . $rDRQ3, $cPWai['openid']); return Response::generateSuccess(); case MemberOauthCallbackMode::AutoBind: goto zA2eu; TvhOQ: switch ($rDRQ3) { case WechatMobileOauth::NAME: case WechatMiniProgramOauth::NAME: case WechatOauth::NAME: if (!empty($cPWai['unionid'])) { MemberUtil::putOauth(MemberUser::id(), MemberOauthConstant::WECHAT_UNION, $cPWai['unionid']); } break; } goto BFw87; zA2eu: BizException::throwsIf('未登录', MemberUser::isNotLogin()); goto nE_cG; BFw87: return Response::generateSuccess(); goto Qjks5; nE_cG: MemberUtil::putOauth(MemberUser::id(), $rDRQ3, $cPWai['openid']); goto TvhOQ; Qjks5: } } goto CJBHv; KpPgc: $cPWai = $FZUh3['data']['userInfo']; goto OoNbM; VWDlk: $TZ7L5 = MemberOauth::getOrFail($rDRQ3); goto D9PMt; dfNoh: $FZUh3 = $TZ7L5->processLogin(array_merge($uZEpM, array('code' => $fKl3n, 'callback' => $oZLCv))); goto cFfQi; ysRkr: if (empty($fKl3n)) { return Response::generate(-1, '登录失败(code为空)', null, '/'); } goto VWDlk; lRAJ3: if ($tURZC) { Session::put('oauthViewOpenId_' . $rDRQ3, $cPWai['openid']); return Response::generateSuccess(); } goto eepiw; cFfQi: if (!isset($FZUh3['code'])) { return Response::generate(-1, '登录失败(返回结果为空)'); } goto vJ4Wx; k510R: $ErQts = InputPackage::buildFromInput(); goto O4f2U; Qcj3r: if (empty($oZLCv)) { $oZLCv = $ErQts->getTrimString('callback', null); } goto n9VQA; CJBHv: Session::put('oauthUserInfo', $cPWai); goto q8Ulm; RrQWo: } public function oauthLogin($rDRQ3 = null, $oZLCv = null) { goto OtwQC; OtwQC: if ($E5p37 = modstart_config()->getWithEnv('oauthDisableText')) { return Response::generateError($E5p37); } goto VUVe1; fWYgt: $cm0If = $ErQts->getBoolean('silence', false); goto LlCy7; LlCy7: $TZ7L5 = MemberOauth::getOrFail($rDRQ3); goto HZ1Uz; g1p6P: $FZUh3 = $TZ7L5->processRedirect($uZEpM); goto N3KkA; eK1c_: Session::put('oauthLoginParam', $uZEpM); goto g1p6P; NkXBy: return Response::generate(0, 'ok', array('redirect' => $FZUh3['data']['redirect'])); goto jnysL; BdDaC: if (empty($oZLCv)) { $oZLCv = $ErQts->getTrimString('callback', 'NO_CALLBACK'); } goto fWYgt; HZ1Uz: $uZEpM = array('callback' => $oZLCv, 'silence' => $cm0If); goto eK1c_; Ob6v1: if (empty($rDRQ3)) { $rDRQ3 = $ErQts->getTrimString('type'); } goto BdDaC; N3KkA: BizException::throwsIfResponseError($FZUh3); goto NkXBy; VUVe1: $ErQts = InputPackage::buildFromInput(); goto Ob6v1; jnysL: } public function ssoClientLogoutPrepare() { goto MGH1T; s8eGg: $ErQts = InputPackage::buildFromInput(); goto V3lCl; ss4B4: $BVGey = modstart_config('ssoClientServer', ''); goto Hhoos; OokSx: $mDpIY = $BVGey . '_logout' . '?' . http_build_query(array('redirect' => $knaKv . '/sso/client_logout')); goto RLfKh; MGH1T: if (!modstart_config('ssoClientEnable', false)) { return Response::generate(-1, '请开启 同步登录客户端'); } goto s8eGg; V3lCl: $knaKv = $ErQts->getTrimString('domainUrl'); goto ss4B4; RLfKh: return Response::generate(0, 'ok', array('redirect' => $mDpIY)); goto xkwNP; Hhoos: if (empty($BVGey)) { return Response::generate(-1, '请配置 同步登录服务端地址'); } goto OokSx; xkwNP: } public function ssoClientLogout() { goto o_t2G; HDaJq: return Response::generate(0, 'ok'); goto OFKwj; o_t2G: if (!modstart_config('ssoClientEnable', false)) { return Response::generate(-1, '请开启 同步登录客户端'); } goto wONPR; wONPR: Session::forget('memberUserId'); goto HDaJq; OFKwj: } public function ssoServerLogout() { goto V1Azf; V1Azf: if (!modstart_config('ssoServerEnable', false)) { return Response::generate(-1, '请开启 同步登录服务端'); } goto v2tUg; FLMmM: return Response::generate(0, 'ok'); goto wljsp; v2tUg: Session::forget('memberUserId'); goto FLMmM; wljsp: } public function ssoServerSuccess() { goto D8Kgd; DjcFn: $KEOWF = false; goto brWRE; s7c7H: $tJ6XI = Session::get('memberUserId', 0); goto s2Ba9; N82mD: $knaKv = $ErQts->getTrimString('domainUrl'); goto j_KAC; NeYiI: $piXgd = explode('
', modstart_config('ssoServerClientList', '')); goto DjcFn; Nikg2: if (!$KEOWF) { return Response::generate(-1, '数据错误(2)'); } goto pJwmc; brWRE: foreach ($piXgd as $AVLNU) { if (trim($AVLNU) == $StcZM) { $KEOWF = true; } } goto Nikg2; hPCb5: $ErQts = InputPackage::buildFromInput(); goto CVaLW; PuisP: $e3gVC = time(); goto vesBr; s2Ba9: if (!$tJ6XI) { return Response::generate(-1, '未登录'); } goto GcLuz; vesBr: $c_Qdc = $CRCLA['username']; goto ETAB1; CVaLW: $StcZM = $ErQts->getTrimString('client'); goto N82mD; UOWGa: return Response::generate(0, null, array('redirect' => $mDpIY)); goto SpRaP; ETAB1: $B3XXm = md5(md5($qeiU3) . md5($e3gVC . '') . md5($RGuJP) . md5($c_Qdc)); goto aPRKD; j_KAC: if (empty($knaKv) || empty($StcZM)) { return Response::generate(-1, '数据错误'); } goto NeYiI; GcLuz: $CRCLA = MemberUtil::get($tJ6XI); goto VKTGb; pJwmc: $RGuJP = $knaKv . '/sso/server'; goto PuisP; D8Kgd: if (!modstart_config('ssoServerEnable', false)) { return Response::generate(-1, '请开启 同步登录服务端'); } goto s7c7H; VKTGb: $qeiU3 = modstart_config('ssoServerSecret'); goto JpRoE; aPRKD: $mDpIY = $StcZM . '?server=' . urlencode($RGuJP) . '&timestamp=' . $e3gVC . '&username=' . urlencode(base64_encode($c_Qdc)) . '&sign=' . $B3XXm; goto UOWGa; JpRoE: if (empty($qeiU3)) { return Response::generate(-1, '请设置 同步登录服务端通讯秘钥'); } goto hPCb5; SpRaP: } public function ssoServer() { goto fYVmA; UK1OV: $VydzK = modstart_config('ssoServerSecret'); goto c63mp; wS8tP: foreach ($piXgd as $AVLNU) { if (trim($AVLNU) == $StcZM) { $KEOWF = true; } } goto P7QIa; tFMMG: if ($B3XXm != $N3mYq) { return Response::generate(-1, 'sign 错误'); } goto FxG1a; fYVmA: if (!modstart_config('ssoServerEnable', false)) { return Response::generate(-1, '请开启 同步登录服务端'); } goto CVbqe; c63mp: if (empty($VydzK)) { return Response::generate(-1, '请设置 同步登录服务端通讯秘钥'); } goto MwCnj; rGqN2: $cbdRi = false; goto rPrDG; CVbqe: $ErQts = InputPackage::buildFromInput(); goto O9Dep; kDpnz: $piXgd = explode('
', modstart_config('ssoServerClientList', '')); goto BeQbz; iVzSm: return Response::generate(0, 'ok', array('isLogin' => $cbdRi)); goto TeQLP; pFk2f: $e3gVC = $ErQts->getInteger('timestamp'); goto xxlZG; MwCnj: $N3mYq = md5(md5($VydzK) . md5($e3gVC . '') . md5($StcZM)); goto tFMMG; xxlZG: $B3XXm = $ErQts->getTrimString('sign'); goto Anffy; rPrDG: if (intval(Session::get('memberUserId', 0)) > 0) { $cbdRi = true; } goto iVzSm; wp0FL: if (empty($B3XXm)) { return Response::generate(-1, 'sign 为空'); } goto UK1OV; FxG1a: if (abs(time() - $e3gVC) > 3600) { return Response::generate(-1, 'timestamp 错误'); } goto kDpnz; P7QIa: if (!$KEOWF) { return Response::generate(-1, '请在 同步登陆服务端增加客户端地址 ' . $StcZM); } goto rGqN2; Anffy: if (empty($StcZM)) { return Response::generate(-1, 'client 为空'); } goto Re014; BeQbz: $KEOWF = false; goto wS8tP; O9Dep: $StcZM = $ErQts->getTrimString('client'); goto pFk2f; Re014: if (empty($e3gVC)) { return Response::generate(-1, 'timestamp 为空'); } goto wp0FL; TeQLP: } public function ssoClient() { goto Kzl23; FFbWC: $ErQts = InputPackage::buildFromInput(); goto VYR1l; O87do: return Response::generate(0, 'ok'); goto TlxHM; c9l6G: if (empty($c_Qdc)) { return Response::generate(-1, '同步登录返回的用户名为空'); } goto Wm5sZ; Znp3P: MemberUtil::fireLogin($CRCLA['id']); goto O87do; ZqPD6: Session::put('memberUserId', $CRCLA['id']); goto Znp3P; fq64s: if (empty($BVGey)) { return Response::generate(-1, '请配置 同步登录服务端地址'); } goto YyDQC; jEQSh: if (empty($CRCLA)) { goto XQt7s; uJRFB: if ($FZUh3['code']) { return Response::generate(-1, $FZUh3['msg']); } goto jNyfY; XQt7s: $FZUh3 = MemberUtil::register($c_Qdc, null, null, null, true); goto uJRFB; jNyfY: $CRCLA = MemberUtil::get($FZUh3['data']['id']); goto GtPiP; GtPiP: } goto ZqPD6; tcZSL: if (empty($KEc0C)) { return Response::generate(-1, '请设置 同步登录客户端通讯秘钥'); } goto FFbWC; yQx_2: $c_Qdc = @base64_decode($ErQts->getTrimString('username')); goto c9l6G; HNWfA: $BVGey = modstart_config('ssoClientServer', ''); goto fq64s; F6j2i: $CRCLA = MemberUtil::getByUsername($c_Qdc); goto jEQSh; Wm5sZ: if (empty($e3gVC)) { return Response::generate(-1, 'timestamp为空'); } goto DdNVP; P_5EZ: $B3XXm = $ErQts->getTrimString('sign'); goto yQx_2; OsPG4: if ($RGuJP != $BVGey) { return Response::generate(-1, '同步登录 服务端地址不是配置的' . $BVGey); } goto F6j2i; DdNVP: if (empty($B3XXm)) { return Response::generate(-1, 'sign为空'); } goto sS9jj; sS9jj: $N3mYq = md5(md5($KEc0C) . md5($e3gVC . '') . md5($RGuJP) . md5($c_Qdc)); goto Ckuqa; YyDQC: $KEc0C = modstart_config('ssoClientSecret'); goto tcZSL; Ckuqa: if ($B3XXm != $N3mYq) { return Response::generate(-1, 'sign错误'); } goto BPqms; oIXWR: $e3gVC = $ErQts->getInteger('timestamp'); goto P_5EZ; BPqms: if (abs(time() - $e3gVC) > 3600) { return Response::generate(-1, 'timestamp错误'); } goto OsPG4; VYR1l: $RGuJP = $ErQts->getTrimString('server'); goto oIXWR; Kzl23: if (!modstart_config('ssoClientEnable', false)) { return Response::generate(-1, '请开启 同步登录客户端'); } goto HNWfA; TlxHM: } public function ssoClientPrepare() { goto ALPNe; jHnTr: $B3XXm = md5(md5($KEc0C) . md5($e3gVC . '') . md5($StcZM)); goto r2Zrg; r2Zrg: $mDpIY = $BVGey . '?client=' . urlencode($StcZM) . '&timestamp=' . $e3gVC . '&sign=' . $B3XXm; goto hnodo; fdFHf: $KEc0C = modstart_config('ssoClientSecret'); goto jYOJ3; J8BEH: if (!Str::endsWith($StcZM, '/sso/client')) { return Response::generate(-1, 'client参数错误'); } goto zyW4o; zyW4o: $e3gVC = time(); goto jHnTr; aRFfg: $BVGey = modstart_config('ssoClientServer'); goto fdFHf; jYOJ3: $ErQts = InputPackage::buildFromInput(); goto Axjn0; Axjn0: $StcZM = $ErQts->getTrimString('client', '/'); goto J8BEH; hnodo: return Response::generate(0, 'ok', array('redirect' => $mDpIY)); goto x64iQ; ALPNe: if (!modstart_config('ssoClientEnable', false)) { return Response::generate(-1, 'SSO未开启'); } goto aRFfg; x64iQ: } public function logout() { goto pdTAv; SU2ZK: Session::forget('memberUserId'); goto SRbXg; pdTAv: $tJ6XI = MemberUser::id(); goto SU2ZK; SRbXg: if ($tJ6XI > 0) { EventUtil::fire(new MemberUserLogoutEvent($tJ6XI)); } goto vAtuR; vAtuR: return Response::generateSuccess(); goto IHSWo; IHSWo: } public function login() { goto Vjxpp; o3OSU: if (!$CRCLA) { $FZUh3 = MemberUtil::login($c_Qdc, null, null, $ESrAL); if (0 == $FZUh3['code']) { $CRCLA = $FZUh3['data']; } } goto kwmbb; tmCLi: $c_Qdc = $ErQts->getTrimString('username'); goto uPgQJ; YCCyU: if (!$CRCLA) { $FZUh3 = MemberUtil::login(null, null, $c_Qdc, $ESrAL); if (0 == $FZUh3['code']) { $CRCLA = $FZUh3['data']; } } goto dRZuY; BsH2u: return Response::generateSuccess(); goto E3w8x; vdJDf: EventUtil::fire(new MemberUserLoginedEvent($CRCLA['id'])); goto BsH2u; GyoBw: if (empty($c_Qdc)) { return Response::generate(-1, '请输入用户'); } goto kVjVO; LR6u8: if (modstart_config('loginCaptchaEnable', false)) { $DBKFO = SecurityUtil::loginCaptchaProvider(); if ($DBKFO) { $FZUh3 = $DBKFO->validate(); if (Response::isError($FZUh3)) { return Response::generate(-1, $FZUh3['msg']); } } else { if (!CaptchaFacade::check($ErQts->getTrimString('captcha'))) { return Response::generate(ResponseCodes::CAPTCHA_ERROR, '登录失败:图片验证码错误', null, '[js]$(\'[data-captcha]\').click();'); } } } goto ud58h; ud58h: $CRCLA = null; goto AXHaA; kwmbb: if (!$CRCLA) { $FZUh3 = MemberUtil::login(null, $c_Qdc, null, $ESrAL); if (0 == $FZUh3['code']) { $CRCLA = $FZUh3['data']; } } goto YCCyU; xpSRu: MemberUtil::fireLogin($CRCLA['id']); goto vdJDf; Vjxpp: $ErQts = InputPackage::buildFromInput(); goto tmCLi; kVjVO: if (empty($ESrAL)) { return Response::generate(-1, '请输入密码'); } goto LR6u8; AXHaA: $E3QGM = null; goto o3OSU; sDyjq: Session::put('memberUserId', $CRCLA['id']); goto xpSRu; uPgQJ: $ESrAL = $ErQts->getTrimString('password'); goto GyoBw; dRZuY: if (!$CRCLA) { $sUWdH = Session::pull('memberUserLoginFailedTip', null); return Response::generate(ResponseCodes::CAPTCHA_ERROR, '登录失败:用户或密码错误' . ($sUWdH ? '，' . $sUWdH : '')); } goto sDyjq; E3w8x: } public function loginCaptchaRaw() { return CaptchaFacade::create('default'); } public function loginPhoneCaptchaRaw() { return CaptchaFacade::create('default'); } public function loginPhone() { goto QkyyF; CPrcB: Session::forget('loginPhoneVerifyTime'); goto oyYvp; zVPL3: $jU6y9 = $ErQts->getPhone('phone'); goto zjnUk; o7rup: if ($yoPP3 != $t7di7) { Log::info('Member.LoginPhone.LoginVerifyError - ' . $yoPP3 . ' - ' . $t7di7); return Response::generate(-1, '手机验证码不正确'); } goto vmSyH; ZUxY1: $CRCLA = MemberUtil::getByPhone($jU6y9); goto wj2H7; zjnUk: $yoPP3 = $ErQts->getTrimString('verify'); goto szyV3; Y0T6s: EventUtil::fire(new MemberUserLoginedEvent($CRCLA)); goto QIJx3; A_wyF: if (empty($CRCLA)) { return Response::generate(-1, '手机没有绑定任何账号'); } goto woVKA; szyV3: if (empty($jU6y9)) { return Response::generate(-1, '手机为空或不正确'); } goto Q01SJ; vmSyH: if (Session::get('loginPhoneVerifyTime') + 60 * 60 < time()) { return Response::generate(0, '手机验证码已过期'); } goto zkKed; QIJx3: return Response::generate(0, null); goto s_nqU; zkKed: if ($jU6y9 != Session::get('loginPhone')) { return Response::generate(-1, '两次手机不一致'); } goto ZUxY1; tiWCT: Session::put('memberUserId', $CRCLA['id']); goto rK2Tn; E_WSh: $t7di7 = Session::get('loginPhoneVerify'); goto o7rup; jCyfo: $ErQts = InputPackage::buildFromInput(); goto zVPL3; wj2H7: if (empty($CRCLA) && modstart_config('Member_LoginPhoneAutoRegister', false)) { goto tCVRS; qmf37: $FZUh3 = MemberUtil::register(null, $jU6y9, null, null, true); goto jClf3; Mof4n: Session::forget('registerCaptchaPass'); goto lUrfa; hAqYW: MemberUtil::autoSetUsernameNickname($tJ6XI, modstart_config('Member_LoginPhoneNameSuggest', '用户')); goto meVj9; E2uFa: $Bj5vh['phoneVerified'] = true; goto xtffC; jClf3: if ($FZUh3['code']) { return Response::generate(-1, $FZUh3['msg']); } goto UZynW; meVj9: $Bj5vh = array(); goto E2uFa; Ei5vZ: EventUtil::fire(new MemberUserRegisteredEvent($tJ6XI)); goto Mof4n; Swdyu: $CRCLA = MemberUtil::get($tJ6XI); goto sCnrC; UZynW: $tJ6XI = $FZUh3['data']['id']; goto hAqYW; OVABj: if (!empty($Bj5vh)) { MemberUtil::update($tJ6XI, $Bj5vh); } goto Ei5vZ; xtffC: $Bj5vh['registerIp'] = StrUtil::mbLimit(Request::ip(), 20); goto OVABj; tCVRS: foreach (MemberRegisterProcessorProvider::listAll() as $yHanX) { $FZUh3 = $yHanX->preCheck(); if (Response::isError($FZUh3)) { return $FZUh3; } } goto qmf37; lUrfa: foreach (MemberRegisterProcessorProvider::listAll() as $yHanX) { $yHanX->postProcess($tJ6XI); } goto Swdyu; sCnrC: } goto A_wyF; QkyyF: BizException::throwsIf('短信验证登录未开启', !modstart_config('Member_LoginPhoneEnable', false)); goto jCyfo; oyYvp: Session::forget('loginPhone'); goto tiWCT; Q01SJ: if (empty($yoPP3)) { return Response::generate(-1, '验证码不能为空'); } goto E_WSh; rK2Tn: MemberUtil::fireLogin($CRCLA['id']); goto Y0T6s; woVKA: Session::forget('loginPhoneVerify'); goto CPrcB; s_nqU: } public function loginPhoneVerify() { goto c7KfC; DYb9f: if (empty($CRCLA) && !modstart_config('Member_LoginPhoneAutoRegister', false)) { return Response::generate(-1, '手机没有绑定任何账号'); } goto vx8iJ; N4_eH: if ($yHanX) { $FZUh3 = $yHanX->validate(); if (Response::isError($FZUh3)) { return $FZUh3; } } else { $iXslQ = $ErQts->getTrimString('captcha'); if (!CaptchaFacade::check($iXslQ)) { return Response::generate(-1, '图片验证码错误'); } } goto xMu3j; kmw1_: $ErQts = InputPackage::buildFromInput(); goto dcYAt; zC9yp: Session::put('loginPhone', $jU6y9); goto tBPmX; nyo61: Session::put('loginPhoneVerify', $yoPP3); goto VQqM8; vx8iJ: if (Session::get('loginPhoneVerifyTime') && $jU6y9 == Session::get('loginPhone')) { if (Session::get('loginPhoneVerifyTime') + 60 > time()) { return Response::generate(-1, '验证码发送频繁，请稍后再试!'); } } goto wX2pZ; N5oL1: return Response::generate(0, '验证码发送成功'); goto FrKPI; j9Bq2: if (empty($jU6y9)) { return Response::generate(-1, '手机为空或格式不正确'); } goto N7BsM; c7KfC: if (!modstart_config('Member_LoginPhoneEnable', false)) { return Response::generate(-1, '短信验证登录未开启'); } goto kmw1_; N7BsM: $yHanX = SecurityUtil::loginCaptchaProvider(); goto N4_eH; dcYAt: $jU6y9 = $ErQts->getPhone('target'); goto j9Bq2; xMu3j: $CRCLA = MemberUtil::getByPhone($jU6y9); goto DYb9f; tBPmX: SmsSendJob::create($jU6y9, 'verify', array('code' => $yoPP3)); goto N5oL1; wX2pZ: $yoPP3 = rand(100000, 999999); goto nyo61; VQqM8: Session::put('loginPhoneVerifyTime', time()); goto zC9yp; FrKPI: } public function loginPhoneCaptcha() { $iXslQ = $this->loginCaptchaRaw(); return Response::generate(0, 'ok', array('image' => 'data:image/png;base64,' . base64_encode($iXslQ->getOriginalContent()))); } public function loginCaptcha() { $iXslQ = $this->loginCaptchaRaw(); return Response::generate(0, 'ok', array('image' => 'data:image/png;base64,' . base64_encode($iXslQ->getOriginalContent()))); } public function registerPhone() { goto Lkcrg; yVTKA: $FZUh3 = MemberUtil::register(null, $jU6y9, null, $ESrAL, $LtExL); goto eiH2L; RgTzd: foreach (MemberRegisterProcessorProvider::listAll() as $yHanX) { $yHanX->postProcess($tJ6XI); } goto hxVR_; eiH2L: if ($FZUh3['code']) { return Response::generate(-1, $FZUh3['msg']); } goto HeOyg; Ks904: $LtExL = true; goto JPlPc; n98DB: $z8YvX = $ErQts->getTrimString('phoneVerify'); goto WQmgB; NW4TC: if ($jU6y9 != Session::get('registerPhone')) { return Response::generate(-1, '两次手机不一致'); } goto ZSQFJ; FFapG: EventUtil::fire(new MemberUserRegisteredEvent($tJ6XI)); goto ccspQ; VlKN1: EventUtil::fire(new MemberUserLoginedEvent($tJ6XI)); goto lpZSU; JPlPc: if (modstart_config('Member_RegisterPhonePasswordEnable', false)) { goto kXF6e; X3sYT: $LtExL = false; goto SdlPf; kXF6e: $ESrAL = $ErQts->getTrimString('password'); goto UQ5Ty; UQ5Ty: BizException::throwsIfEmpty('请输入密码', $ESrAL); goto uZlTv; uZlTv: BizException::throwsIfResponseError(MemberUtil::passwordStrengthCheck($ESrAL)); goto X3sYT; SdlPf: } goto snx1V; qv19L: $Bj5vh = array(); goto py7Yz; PbUi7: BizException::throwsIf('短信验证注册未开启', !modstart_config('Member_RegisterPhoneEnable', false)); goto YvfAm; py7Yz: $Bj5vh['phoneVerified'] = true; goto Yj1Es; ZSQFJ: foreach (MemberRegisterProcessorProvider::listAll() as $yHanX) { $FZUh3 = $yHanX->preCheck(); if (Response::isError($FZUh3)) { return $FZUh3; } } goto yVTKA; HeOyg: $tJ6XI = $FZUh3['data']['id']; goto tfFsy; yFhvo: MemberUtil::fireLogin($tJ6XI); goto VlKN1; lpZSU: return Response::generate(0, '注册成功', array('id' => $tJ6XI)); goto QmUBP; tfFsy: MemberUtil::autoSetUsernameNickname($tJ6XI, modstart_config('Member_LoginPhoneNameSuggest', '用户')); goto qv19L; YvfAm: $ErQts = InputPackage::buildFromInput(); goto PjbuX; Lkcrg: BizException::throwsIf('禁止注册', modstart_config('registerDisable', false)); goto PbUi7; Sr7B9: if ($z8YvX != $vIFxt) { Log::info('Member.RegisterPhone.PhoneVerifyError - ' . $z8YvX . ' - ' . $vIFxt); return Response::generate(-1, '手机验证码不正确.'); } goto KKAY2; PjbuX: if (modstart_config('Member_AgreementEnable', false)) { if (!$ErQts->getBoolean('agreement')) { return Response::generateError('请先同意 ' . modstart_config('Member_AgreementTitle', '用户使用协议')); } } goto EsM8A; EsM8A: $jU6y9 = $ErQts->getPhone('phone'); goto n98DB; cp78G: $vIFxt = Session::get('registerPhoneVerify'); goto Sr7B9; Yj1Es: $Bj5vh['registerIp'] = StrUtil::mbLimit(Request::ip(), 20); goto yo2Hw; KKAY2: if (Session::get('registerPhoneVerifyTime') + 60 * 60 < time()) { return Response::generate(-1, '手机验证码已过期'); } goto NW4TC; yo2Hw: if (!empty($Bj5vh)) { MemberUtil::update($tJ6XI, $Bj5vh); } goto FFapG; hxVR_: Session::put('memberUserId', $tJ6XI); goto yFhvo; ccspQ: Session::forget('registerCaptchaPass'); goto RgTzd; WQmgB: $ESrAL = null; goto Ks904; snx1V: if (empty($jU6y9)) { return Response::generate(-1, '请输入手机'); } goto cp78G; QmUBP: } public function register() { goto zxj0k; tzAX6: $FZUh3 = MemberUtil::register($c_Qdc, $jU6y9, $PcW1B, $ESrAL); goto IkfLn; iXh3s: if (modstart_config('registerEmailEnable')) { goto dVSjH; DQGPZ: $pyCdV = Session::get('registerEmailVerify'); goto Obquq; OAZuF: if ($PcW1B != Session::get('registerEmail')) { return Response::generate(-1, '两次邮箱不一致'); } goto NZvdB; p6EtX: if (Session::get('registerEmailVerifyTime') + 60 * 60 < time()) { return Response::generate(-1, '邮箱验证码已过期'); } goto OAZuF; dVSjH: if (empty($PcW1B)) { return Response::generate(-1, '请输入邮箱'); } goto DQGPZ; Obquq: if ($fgXQD != $pyCdV) { Log::info('Member.Register.EmailVerifyError - ' . $fgXQD . ' - ' . $pyCdV); return Response::generate(-1, '邮箱验证码不正确.'); } goto p6EtX; NZvdB: } goto KVVRb; SPJ8W: $PcW1B = $ErQts->getEmail('email'); goto Dz06f; wUSFk: if (!empty($Bj5vh)) { MemberUtil::update($tJ6XI, $Bj5vh); } goto ngRru; bjDqK: if (Str::contains($c_Qdc, '@')) { return Response::generate(-1, '用户名不能包含特殊字符'); } goto aunXi; L731y: $tJ6XI = $FZUh3['data']['id']; goto sBG7u; g7kkE: return Response::generate(0, '注册成功', array('id' => $tJ6XI)); goto O0_5s; wWZK9: if (!Session::get('registerCaptchaPass', false)) { if (!CaptchaFacade::check($iXslQ)) { SessionUtil::atomicProduce('registerCaptchaPassCount', 1); return Response::generate(-1, '请重新进行安全验证'); } } goto y7ta1; y7ta1: if (!SessionUtil::atomicConsume('registerCaptchaPassCount')) { return Response::generate(-1, '请进行安全验证'); } goto WREe3; K9Vrw: $z8YvX = $ErQts->getTrimString('phoneVerify'); goto SPJ8W; OOee3: if (modstart_config('Member_AgreementEnable', false)) { if (!$ErQts->getBoolean('agreement')) { return Response::generateError('请先同意 ' . modstart_config('Member_AgreementTitle', '用户使用协议')); } } goto d0dcr; KVVRb: if (empty($ESrAL)) { return Response::generate(-1, '请输入密码'); } goto DNAX_; PDney: foreach (MemberRegisterProcessorProvider::listAll() as $yHanX) { $FZUh3 = $yHanX->preCheck(); if (Response::isError($FZUh3)) { return $FZUh3; } } goto tzAX6; LVZNA: $ESrAL = $ErQts->getTrimString('password'); goto r7ruF; k_Y86: foreach (MemberRegisterProcessorProvider::listAll() as $yHanX) { $yHanX->postProcess($tJ6XI); } goto g7kkE; DNAX_: if ($ESrAL != $QKE3_) { return Response::generate(-1, '两次输入密码不一致'); } goto eF9D1; MqN_G: if (modstart_config('registerEmailEnable')) { $Bj5vh['emailVerified'] = true; } goto rXxdd; sBG7u: $Bj5vh = array(); goto ESw_l; ngRru: EventUtil::fire(new MemberUserRegisteredEvent($tJ6XI)); goto r_QIZ; tGFGu: $iXslQ = $ErQts->getTrimString('captcha'); goto ssdi8; ESw_l: if (modstart_config('registerPhoneEnable')) { $Bj5vh['phoneVerified'] = true; } goto MqN_G; zxj0k: if (modstart_config('registerDisable', false)) { return Response::generate(-1, '禁止注册'); } goto c42Li; r7ruF: $QKE3_ = $ErQts->getTrimString('passwordRepeat'); goto tGFGu; IkfLn: if ($FZUh3['code']) { return Response::generate(-1, $FZUh3['msg']); } goto L731y; rXxdd: $Bj5vh['registerIp'] = StrUtil::mbLimit(Request::ip(), 20); goto wUSFk; Dz06f: $fgXQD = $ErQts->getTrimString('emailVerify'); goto LVZNA; r_QIZ: Session::forget('registerCaptchaPass'); goto k_Y86; aunXi: if (preg_match('/^\\d{11}$/', $c_Qdc)) { return Response::generate(-1, '用户名不能为纯数字'); } goto wWZK9; d0dcr: $c_Qdc = $ErQts->getTrimString('username'); goto L31lZ; WREe3: if (modstart_config('registerPhoneEnable')) { goto cbTeZ; aIMVr: if ($jU6y9 != Session::get('registerPhone')) { return Response::generate(-1, '两次手机不一致'); } goto pTH8u; esNwL: $vIFxt = Session::get('registerPhoneVerify'); goto MMmxl; s2QCC: if (Session::get('registerPhoneVerifyTime') + 60 * 60 < time()) { return Response::generate(-1, '手机验证码已过期'); } goto aIMVr; MMmxl: if ($z8YvX != $vIFxt) { Log::info('Member.Register.PhoneVerifyError - ' . $z8YvX . ' - ' . $vIFxt); return Response::generate(-1, '手机验证码不正确.'); } goto s2QCC; cbTeZ: if (empty($jU6y9)) { return Response::generate(-1, '请输入手机'); } goto esNwL; pTH8u: } goto iXh3s; ssdi8: if (empty($c_Qdc)) { return Response::generate(-1, '用户名不能为空'); } goto bjDqK; eF9D1: BizException::throwsIfResponseError(MemberUtil::passwordStrengthCheck($ESrAL)); goto PDney; L31lZ: $jU6y9 = $ErQts->getPhone('phone'); goto K9Vrw; c42Li: $ErQts = InputPackage::buildFromInput(); goto OOee3; O0_5s: } public function registerEmailVerify() { goto xOxGv; IhBHv: $PcW1B = $ErQts->getEmail('target'); goto oOvRc; Gtv_I: Session::put('registerEmailVerify', $yoPP3); goto Edarr; Cotsm: if (!SessionUtil::atomicConsume('registerCaptchaPassCount')) { return Response::generate(-1, '请进行安全验证'); } goto qxAbj; E9z5a: if (Session::get('registerEmailVerifyTime') && $PcW1B == Session::get('registerEmail')) { if (Session::get('registerEmailVerifyTime') + 60 > time()) { return Response::generate(-1, '验证码发送频繁，请稍后再试!'); } } goto Jd_Q8; Jd_Q8: $yoPP3 = rand(100000, 999999); goto MnlTm; qxAbj: $CRCLA = MemberUtil::getByEmail($PcW1B); goto LRPCM; oOvRc: if (empty($PcW1B)) { return Response::generate(-1, '邮箱不能为空'); } goto syKPz; rkz6u: if (!modstart_config('registerEmailEnable')) { return Response::generate(-1, '注册未开启邮箱'); } goto ynEdA; Edarr: Session::put('registerEmailVerifyTime', time()); goto znxg1; ynEdA: $ErQts = InputPackage::buildFromInput(); goto IhBHv; xOxGv: if (modstart_config('registerDisable', false)) { return Response::generate(-1, '禁止注册'); } goto rkz6u; syKPz: if (!Session::get('registerCaptchaPass', false)) { return Response::generate(-1, '请先进行安全验证'); } goto Cotsm; JT1bB: return Response::generate(0, '验证码发送成功'); goto xyl7A; LRPCM: if (!empty($CRCLA)) { return Response::generate(-1, '邮箱已经被占用'); } goto E9z5a; znxg1: Session::put('registerEmail', $PcW1B); goto JT1bB; MnlTm: MailSendJob::create($PcW1B, '注册账户验证码', 'verify', array('code' => $yoPP3)); goto Gtv_I; xyl7A: } public function registerPhoneVerify() { goto EXzSn; P2eif: Session::put('registerPhone', $jU6y9); goto K7des; vc8h3: if (!empty($CRCLA)) { return Response::generate(-1, '手机已经被占用'); } goto i2iR0; X1YsX: SmsSendJob::create($jU6y9, 'verify', array('code' => $yoPP3)); goto Cn0kF; pQtcl: if (!Session::get('registerCaptchaPass', false)) { return Response::generate(-1, '请先进行安全验证'); } goto Mhfhn; R8CmZ: $ErQts = InputPackage::buildFromInput(); goto CVxk0; BcoFy: if (empty($jU6y9)) { return Response::generate(-1, '手机不能为空'); } goto pQtcl; rAOir: if (!modstart_config('registerPhoneEnable')) { return Response::generate(-1, '注册未开启手机'); } goto R8CmZ; Mhfhn: if (!SessionUtil::atomicConsume('registerCaptchaPassCount')) { return Response::generate(-1, '请进行安全验证'); } goto o5JBj; o5JBj: $CRCLA = MemberUtil::getByPhone($jU6y9); goto vc8h3; K7des: return Response::generate(0, '验证码发送成功'); goto iuVss; Cn0kF: Session::put('registerPhoneVerify', $yoPP3); goto dElhB; dElhB: Session::put('registerPhoneVerifyTime', time()); goto P2eif; EXzSn: if (modstart_config('registerDisable', false)) { return Response::generate(-1, '禁止注册'); } goto rAOir; TxoEl: $yoPP3 = rand(100000, 999999); goto X1YsX; i2iR0: if (Session::get('registerPhoneVerifyTime') && $jU6y9 == Session::get('registerPhone')) { if (Session::get('registerPhoneVerifyTime') + 60 > time()) { return Response::generate(0, '验证码发送成功!'); } } goto TxoEl; CVxk0: $jU6y9 = $ErQts->getPhone('target'); goto BcoFy; iuVss: } public function registerCaptchaVerify() { goto SD5iE; QG4jE: if (modstart_config('registerEmailEnable')) { $JUaK5++; } goto eQQtB; Suojc: SessionUtil::atomicProduce('registerCaptchaPassCount', $JUaK5); goto k5VYI; SD5iE: $yHanX = SecurityUtil::registerCaptchaProvider(); goto ZTDcS; k5VYI: return Response::generateSuccess(); goto uYDtP; Sky70: Session::put('registerCaptchaPass', true); goto KvihB; eQQtB: if (modstart_config('registerPhoneEnable')) { $JUaK5++; } goto Suojc; ZTDcS: if ($yHanX) { $FZUh3 = $yHanX->validate(); if (Response::isError($FZUh3)) { return $FZUh3; } } else { goto oVU2d; oVU2d: $ErQts = InputPackage::buildFromInput(); goto wBHu1; nuPBc: if (!CaptchaFacade::check($iXslQ)) { SessionUtil::atomicRemove('registerCaptchaPassCount'); return Response::generate(ResponseCodes::CAPTCHA_ERROR, '验证码错误'); } goto O74D3; wBHu1: $iXslQ = $ErQts->getTrimString('captcha'); goto nuPBc; O74D3: } goto Sky70; KvihB: $JUaK5 = 1; goto QG4jE; uYDtP: } public function oauthBindCaptchaVerify() { goto oNq3K; qfX04: Session::put('oauthBindCaptchaPass', true); goto NC7i0; yCaXT: return Response::generateSuccess(); goto rFcxb; dtRPV: if (!CaptchaFacade::check($iXslQ)) { SessionUtil::atomicRemove('oauthBindCaptchaPassCount'); return Response::generate(ResponseCodes::CAPTCHA_ERROR, '验证码错误'); } goto qfX04; rzULa: if (modstart_config('Member_OauthBindPhoneEnable')) { $sk10a++; } goto dhonJ; NC7i0: $sk10a = 1; goto rzULa; oNq3K: $ErQts = InputPackage::buildFromInput(); goto MlB3G; dhonJ: if (modstart_config('Member_OauthBindEmailEnable')) { $sk10a++; } goto g2z1M; g2z1M: SessionUtil::atomicProduce('oauthBindCaptchaPassCount', $sk10a); goto yCaXT; MlB3G: $iXslQ = $ErQts->getTrimString('captcha'); goto dtRPV; rFcxb: } public function oauthBindCaptchaRaw() { return CaptchaFacade::create('default'); } public function oauthBindCaptcha() { goto hoJUD; BkJm3: $iXslQ = $this->oauthBindCaptchaRaw(); goto ThDSq; ThDSq: return Response::generate(0, 'ok', array('image' => 'data:image/png;base64,' . base64_encode($iXslQ->getOriginalContent()))); goto D3rgA; hoJUD: Session::forget('oauthBindCaptchaPass'); goto BkJm3; D3rgA: } public function oauthBindEmailVerify() { goto hlfDi; xc4xW: $PcW1B = $ErQts->getEmail('target'); goto VyR4l; tdE8H: $ErQts = InputPackage::buildFromInput(); goto xc4xW; hlfDi: if (!modstart_config('Member_OauthBindEmailEnable')) { return Response::generate(-1, '授权登录未开启邮箱'); } goto tdE8H; QCqT2: if (!SessionUtil::atomicConsume('oauthBindCaptchaPassCount')) { return Response::generate(-1, '请进行安全验证'); } goto bpHNC; pJmj5: $yoPP3 = rand(100000, 999999); goto oQMYI; xZTWf: if (Session::get('oauthBindEmailVerifyTime') && $PcW1B == Session::get('oauthBindEmail')) { if (Session::get('oauthBindEmailVerifyTime') + 60 > time()) { return Response::generate(-1, '验证码发送频繁，请稍后再试!'); } } goto pJmj5; VyR4l: if (empty($PcW1B)) { return Response::generate(-1, '邮箱不能为空'); } goto kKXVM; LK7EO: Session::put('oauthBindEmail', $PcW1B); goto A0o3H; h3d1A: if (!empty($CRCLA)) { return Response::generate(-1, '邮箱已经被占用'); } goto xZTWf; dryi9: Session::put('oauthBindEmailVerifyTime', time()); goto LK7EO; kKXVM: if (!Session::get('oauthBindCaptchaPass', false)) { return Response::generate(-1, '请先进行安全验证'); } goto QCqT2; A0o3H: return Response::generate(0, '验证码发送成功'); goto PWDjL; rsiR8: Session::put('oauthBindEmailVerify', $yoPP3); goto dryi9; oQMYI: MailSendJob::create($PcW1B, '注册账户验证码', 'verify', array('code' => $yoPP3)); goto rsiR8; bpHNC: $CRCLA = MemberUtil::getByEmail($PcW1B); goto h3d1A; PWDjL: } public function oauthBindPhoneVerify() { goto ByZwj; LWMFY: if (Session::get('oauthBindPhoneVerifyTime') && $jU6y9 == Session::get('oauthBindPhone')) { if (Session::get('oauthBindPhoneVerifyTime') + 60 > time()) { return Response::generate(0, '验证码发送成功!'); } } goto MT66P; MT66P: $yoPP3 = rand(100000, 999999); goto qQKrC; ILrfS: if (!empty($CRCLA)) { return Response::generate(-1, '手机已经被占用'); } goto LWMFY; US8LI: Session::put('oauthBindPhone', $jU6y9); goto JHDpX; qKbh3: if (empty($jU6y9)) { return Response::generate(-1, '手机不能为空'); } goto W9U7w; JHDpX: return Response::generate(0, '验证码发送成功'); goto GZbR4; BVJEM: if (!SessionUtil::atomicConsume('oauthBindCaptchaPassCount')) { return Response::generate(-1, '请进行安全验证'); } goto MWo6u; t1gF6: $ErQts = InputPackage::buildFromInput(); goto QTGsO; QTGsO: $jU6y9 = $ErQts->getPhone('target'); goto qKbh3; Rp3ga: Session::put('oauthBindPhoneVerify', $yoPP3); goto THIJ1; ByZwj: if (!modstart_config('Member_OauthBindPhoneEnable')) { return Response::generate(-1, '注册未开启手机'); } goto t1gF6; W9U7w: if (!Session::get('oauthBindCaptchaPass', false)) { return Response::generate(-1, '请先进行安全验证'); } goto BVJEM; MWo6u: $CRCLA = MemberUtil::getByPhone($jU6y9); goto ILrfS; qQKrC: SmsSendJob::create($jU6y9, 'verify', array('code' => $yoPP3)); goto Rp3ga; THIJ1: Session::put('oauthBindPhoneVerifyTime', time()); goto US8LI; GZbR4: } public function registerCaptchaRaw() { return CaptchaFacade::create('default'); } public function registerCaptcha() { goto dA_JB; YMNfv: return Response::generate(0, 'ok', array('image' => 'data:image/png;base64,' . base64_encode($iXslQ->getOriginalContent()))); goto j_RvU; dA_JB: Session::forget('registerCaptchaPass'); goto PF_fD; PF_fD: $iXslQ = $this->registerCaptchaRaw(); goto YMNfv; j_RvU: } public function retrievePhone() { goto p5MIR; NOEQk: Session::forget('retrievePhoneVerify'); goto H7HCN; jCQXy: $yoPP3 = $ErQts->getTrimString('verify'); goto Z3QAq; CfwYG: $CRCLA = MemberUtil::getByPhone($jU6y9); goto Qv0Yz; gOtzC: $t7di7 = Session::get('retrievePhoneVerify'); goto MKFZh; Yb1gN: return Response::generate(0, null); goto oOwx6; nmtJO: if ($jU6y9 != Session::get('retrievePhone')) { return Response::generate(-1, '两次手机不一致'); } goto CfwYG; UJIW5: if (Session::get('retrievePhoneVerifyTime') + 60 * 60 < time()) { return Response::generate(0, '手机验证码已过期'); } goto nmtJO; p5MIR: if (modstart_config('retrieveDisable', false)) { return Response::generate(-1, '找回密码已禁用'); } goto QnUw1; Qv0Yz: if (empty($CRCLA)) { return Response::generate(-1, '手机没有绑定任何账号'); } goto NOEQk; F1H1j: Session::put('retrieveMemberUserId', $CRCLA['id']); goto Yb1gN; H7HCN: Session::forget('retrievePhoneVerifyTime'); goto AiyYM; s722K: if (!modstart_config('retrievePhoneEnable', false)) { return Response::generate(-1, '找回密码没有开启'); } goto OPwSw; MKFZh: if ($yoPP3 != $t7di7) { Log::info('Member.RetrievePhone.PhoneVerifyError - ' . $yoPP3 . ' - ' . $t7di7); return Response::generate(-1, '手机验证码不正确'); } goto UJIW5; QnUw1: $ErQts = InputPackage::buildFromInput(); goto s722K; AiyYM: Session::forget('retrievePhone'); goto F1H1j; Z3QAq: if (empty($jU6y9)) { return Response::generate(-1, '手机为空或不正确'); } goto VpBy3; OPwSw: $jU6y9 = $ErQts->getPhone('phone'); goto jCQXy; VpBy3: if (empty($yoPP3)) { return Response::generate(-1, '验证码不能为空'); } goto gOtzC; oOwx6: } public function retrievePhoneVerify() { goto vJW7r; mzGeV: $ErQts = InputPackage::buildFromInput(); goto tNUd7; tNUd7: $jU6y9 = $ErQts->getPhone('target'); goto iUUOP; vJW7r: if (modstart_config('retrieveDisable', false)) { return Response::generate(-1, '找回密码已禁用'); } goto mzGeV; MG2OX: Session::put('retrievePhone', $jU6y9); goto PRmyM; XL62D: $CRCLA = MemberUtil::getByPhone($jU6y9); goto H8hAh; rQS3r: $yoPP3 = rand(100000, 999999); goto Z8HNQ; a1W8K: return Response::generate(0, '验证码发送成功'); goto Y03fC; YgL3f: if (Session::get('retrievePhoneVerifyTime') && $jU6y9 == Session::get('retrievePhone')) { if (Session::get('retrievePhoneVerifyTime') + 60 * 2 > time()) { return Response::generate(0, '验证码发送成功!'); } } goto rQS3r; iUUOP: if (empty($jU6y9)) { return Response::generate(-1, '手机为空或格式不正确'); } goto jTdtb; H8hAh: if (empty($CRCLA)) { return Response::generate(-1, '手机没有绑定任何账号'); } goto YgL3f; jTdtb: $iXslQ = $ErQts->getTrimString('captcha'); goto eIk_l; Z8HNQ: Session::put('retrievePhoneVerify', $yoPP3); goto Q0bYu; Q0bYu: Session::put('retrievePhoneVerifyTime', time()); goto MG2OX; PRmyM: SmsSendJob::create($jU6y9, 'verify', array('code' => $yoPP3)); goto a1W8K; eIk_l: if (!CaptchaFacade::check($iXslQ)) { return Response::generate(-1, '图片验证码错误'); } goto XL62D; Y03fC: } public function retrieveEmail() { goto QsXFi; oYOMw: if (empty($CRCLA)) { return Response::generate(-1, '邮箱没有绑定任何账号'); } goto m9Iyb; MOmqK: $ErQts = InputPackage::buildFromInput(); goto rWphN; p7U91: return Response::generate(0, null); goto l8MLr; dLaSU: $CRCLA = MemberUtil::getByEmail($PcW1B); goto oYOMw; G2huA: if (empty($PcW1B)) { return Response::generate(-1, '邮箱为空或格式不正确'); } goto wRZLe; n29PT: if (!modstart_config('retrieveEmailEnable', false)) { return Response::generate(-1, '找回密码没有开启'); } goto MOmqK; geVix: if ($PcW1B != Session::get('retrieveEmail')) { return Response::generate(-1, '两次邮箱不一致'); } goto dLaSU; QsXFi: if (modstart_config('retrieveDisable', false)) { return Response::generate(-1, '找回密码已禁用'); } goto n29PT; PXZab: if (Session::get('retrieveEmailVerifyTime') + 60 * 60 < time()) { return Response::generate(0, '邮箱验证码已过期'); } goto geVix; SvS1s: $yoPP3 = $ErQts->getTrimString('verify'); goto G2huA; QBNUD: Session::forget('retrieveEmailVerifyTime'); goto auJJJ; cZu9x: if ($yoPP3 != $t7di7) { Log::info('Member.RetrieveEmail.PhoneVerifyError - ' . $yoPP3 . '- ' . $t7di7); return Response::generate(-1, '邮箱验证码不正确'); } goto PXZab; HRrNo: $t7di7 = Session::get('retrieveEmailVerify'); goto cZu9x; auJJJ: Session::forget('retrieveEmail'); goto whrCD; rWphN: $PcW1B = $ErQts->getEmail('email'); goto SvS1s; whrCD: Session::put('retrieveMemberUserId', $CRCLA['id']); goto p7U91; m9Iyb: Session::forget('retrieveEmailVerify'); goto QBNUD; wRZLe: if (empty($yoPP3)) { return Response::generate(-1, '验证码不能为空'); } goto HRrNo; l8MLr: } public function retrieveEmailVerify() { goto PCmyz; efjOo: Session::put('retrieveEmailVerify', $yoPP3); goto kK4By; udNdB: MailSendJob::create($PcW1B, '找回密码验证码', 'verify', array('code' => $yoPP3)); goto efjOo; GiIXx: Session::put('retrieveEmail', $PcW1B); goto fSjkz; kK4By: Session::put('retrieveEmailVerifyTime', time()); goto GiIXx; PCmyz: if (modstart_config('retrieveDisable', false)) { return Response::generate(-1, '找回密码已禁用'); } goto nXFr0; lqlfL: $yoPP3 = rand(100000, 999999); goto udNdB; E7p4V: if (!CaptchaFacade::check($iXslQ)) { return Response::generate(-1, '图片验证码错误'); } goto OfCr0; vZC4S: $iXslQ = $ErQts->getTrimString('captcha'); goto E7p4V; fSjkz: return Response::generate(0, '验证码发送成功'); goto aWQn8; nt4db: if (Session::get('retrieveEmailVerifyTime') && $PcW1B == Session::get('retrieveEmail')) { if (Session::get('retrieveEmailVerifyTime') + 60 > time()) { return Response::generate(0, '验证码发送成功!'); } } goto lqlfL; CGKlg: $PcW1B = $ErQts->getEmail('target'); goto uV8Cr; IvR1H: if (empty($CRCLA)) { return Response::generate(-1, '邮箱没有绑定任何账号'); } goto nt4db; nXFr0: $ErQts = InputPackage::buildFromInput(); goto CGKlg; OfCr0: $CRCLA = MemberUtil::getByEmail($PcW1B); goto IvR1H; uV8Cr: if (empty($PcW1B)) { return Response::generate(-1, '邮箱格式不正确或为空'); } goto vZC4S; aWQn8: } public function retrieveResetInfo() { goto QYsb0; AjS1U: $CRCLA = MemberUtil::get($GJ6Ov); goto aijiL; lEgE0: if (empty($c_Qdc)) { $c_Qdc = $CRCLA['phone']; } goto fzn5x; fzn5x: if (empty($c_Qdc)) { $c_Qdc = $CRCLA['email']; } goto tjeOP; QYsb0: $GJ6Ov = Session::get('retrieveMemberUserId'); goto de59Z; tjeOP: return Response::generate(0, null, array('memberUser' => array('username' => $c_Qdc))); goto Tpkot; de59Z: if (empty($GJ6Ov)) { return Response::generate(-1, '请求错误'); } goto AjS1U; aijiL: $c_Qdc = $CRCLA['username']; goto lEgE0; Tpkot: } public function retrieveReset() { goto WCRYq; dNgwb: if ($FZUh3['code']) { return Response::generate(-1, $FZUh3['msg']); } goto yKE61; xKseQ: $QKE3_ = $ErQts->getTrimString('passwordRepeat'); goto pgwA3; qqtwf: $GJ6Ov = Session::get('retrieveMemberUserId'); goto qZnlg; WCRYq: if (modstart_config('retrieveDisable', false)) { return Response::generate(-1, '找回密码已禁用'); } goto WwO9j; qZnlg: if (empty($GJ6Ov)) { return Response::generate(-1, '请求错误'); } goto dzpHc; v_0qj: if (empty($CRCLA)) { return Response::generate(-1, '用户不存在'); } goto NIEVb; J3T0h: BizException::throwsIfResponseError(MemberUtil::passwordStrengthCheck($ESrAL)); goto yb0LL; tK24r: if ($ESrAL != $QKE3_) { return Response::generate(-1, '两次输入密码不一致'); } goto J3T0h; T8433: return Response::generate(0, '成功设置新密码,请您登录'); goto ZmBE2; dzpHc: $ESrAL = $ErQts->getTrimString('password'); goto xKseQ; WwO9j: $ErQts = InputPackage::buildFromInput(); goto qqtwf; yKE61: EventUtil::fire(new MemberUserPasswordResetedEvent($CRCLA['id'], $ESrAL)); goto zauzk; yb0LL: $CRCLA = MemberUtil::get($GJ6Ov); goto v_0qj; zauzk: Session::forget('retrieveMemberUserId'); goto T8433; pgwA3: if (empty($ESrAL)) { return Response::generate(-1, '请输入密码'); } goto tK24r; NIEVb: $FZUh3 = MemberUtil::changePassword($CRCLA['id'], $ESrAL, null, true); goto dNgwb; ZmBE2: } public function retrieveCaptchaRaw() { return CaptchaFacade::create('default'); } public function retrieveCaptcha() { $iXslQ = $this->retrieveCaptchaRaw(); return Response::generate(0, 'ok', array('image' => 'data:image/png;base64,' . base64_encode($iXslQ->getOriginalContent()))); } }